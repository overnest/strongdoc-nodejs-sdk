// source: document.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var protoc$gen$swagger_options_annotations_pb = require('./protoc-gen-swagger/options/annotations_pb.js');
goog.object.extend(proto, protoc$gen$swagger_options_annotations_pb);
var encryption_pb = require('./encryption_pb.js');
goog.object.extend(proto, encryption_pb);
goog.exportSymbol('proto.proto.DocumentAccessMetadata', null, global);
goog.exportSymbol('proto.proto.DownloadDocE2EReq', null, global);
goog.exportSymbol('proto.proto.DownloadDocE2EResp', null, global);
goog.exportSymbol('proto.proto.DownloadDocReq', null, global);
goog.exportSymbol('proto.proto.DownloadDocResp', null, global);
goog.exportSymbol('proto.proto.DownloadDocStreamReq', null, global);
goog.exportSymbol('proto.proto.DownloadDocStreamResp', null, global);
goog.exportSymbol('proto.proto.ListDocumentsReq', null, global);
goog.exportSymbol('proto.proto.ListDocumentsResp', null, global);
goog.exportSymbol('proto.proto.ListDocumentsResp.Document', null, global);
goog.exportSymbol('proto.proto.PrepareDownloadDocReq', null, global);
goog.exportSymbol('proto.proto.PrepareDownloadDocResp', null, global);
goog.exportSymbol('proto.proto.PrepareShareDocumentReq', null, global);
goog.exportSymbol('proto.proto.PrepareShareDocumentResp', null, global);
goog.exportSymbol('proto.proto.RemoveDocumentReq', null, global);
goog.exportSymbol('proto.proto.RemoveDocumentResp', null, global);
goog.exportSymbol('proto.proto.ShareDocumentReq', null, global);
goog.exportSymbol('proto.proto.ShareDocumentResp', null, global);
goog.exportSymbol('proto.proto.UnshareDocumentReq', null, global);
goog.exportSymbol('proto.proto.UnshareDocumentResp', null, global);
goog.exportSymbol('proto.proto.UploadDocPostMetadata', null, global);
goog.exportSymbol('proto.proto.UploadDocPreMetadata', null, global);
goog.exportSymbol('proto.proto.UploadDocReq', null, global);
goog.exportSymbol('proto.proto.UploadDocResp', null, global);
goog.exportSymbol('proto.proto.UploadDocStreamReq', null, global);
goog.exportSymbol('proto.proto.UploadDocStreamReq.NameordataCase', null, global);
goog.exportSymbol('proto.proto.UploadDocStreamResp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UploadDocStreamReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.UploadDocStreamReq.oneofGroups_);
};
goog.inherits(proto.proto.UploadDocStreamReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UploadDocStreamReq.displayName = 'proto.proto.UploadDocStreamReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UploadDocPreMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.UploadDocPreMetadata.repeatedFields_, null);
};
goog.inherits(proto.proto.UploadDocPreMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UploadDocPreMetadata.displayName = 'proto.proto.UploadDocPreMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UploadDocPostMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UploadDocPostMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UploadDocPostMetadata.displayName = 'proto.proto.UploadDocPostMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UploadDocStreamResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UploadDocStreamResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UploadDocStreamResp.displayName = 'proto.proto.UploadDocStreamResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PrepareDownloadDocReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PrepareDownloadDocReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PrepareDownloadDocReq.displayName = 'proto.proto.PrepareDownloadDocReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PrepareDownloadDocResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PrepareDownloadDocResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PrepareDownloadDocResp.displayName = 'proto.proto.PrepareDownloadDocResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.DownloadDocStreamReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.DownloadDocStreamReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.DownloadDocStreamReq.displayName = 'proto.proto.DownloadDocStreamReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.DownloadDocStreamResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.DownloadDocStreamResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.DownloadDocStreamResp.displayName = 'proto.proto.DownloadDocStreamResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UploadDocReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UploadDocReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UploadDocReq.displayName = 'proto.proto.UploadDocReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UploadDocResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UploadDocResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UploadDocResp.displayName = 'proto.proto.UploadDocResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.DownloadDocReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.DownloadDocReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.DownloadDocReq.displayName = 'proto.proto.DownloadDocReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.DownloadDocResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.DownloadDocResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.DownloadDocResp.displayName = 'proto.proto.DownloadDocResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.DocumentAccessMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.DocumentAccessMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.DocumentAccessMetadata.displayName = 'proto.proto.DocumentAccessMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PrepareShareDocumentReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PrepareShareDocumentReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PrepareShareDocumentReq.displayName = 'proto.proto.PrepareShareDocumentReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.PrepareShareDocumentResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.PrepareShareDocumentResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.PrepareShareDocumentResp.displayName = 'proto.proto.PrepareShareDocumentResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ShareDocumentReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ShareDocumentReq.repeatedFields_, null);
};
goog.inherits(proto.proto.ShareDocumentReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ShareDocumentReq.displayName = 'proto.proto.ShareDocumentReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ShareDocumentResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ShareDocumentResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ShareDocumentResp.displayName = 'proto.proto.ShareDocumentResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UnshareDocumentReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UnshareDocumentReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UnshareDocumentReq.displayName = 'proto.proto.UnshareDocumentReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UnshareDocumentResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UnshareDocumentResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UnshareDocumentResp.displayName = 'proto.proto.UnshareDocumentResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ListDocumentsReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ListDocumentsReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ListDocumentsReq.displayName = 'proto.proto.ListDocumentsReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ListDocumentsResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ListDocumentsResp.repeatedFields_, null);
};
goog.inherits(proto.proto.ListDocumentsResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ListDocumentsResp.displayName = 'proto.proto.ListDocumentsResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ListDocumentsResp.Document = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ListDocumentsResp.Document, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ListDocumentsResp.Document.displayName = 'proto.proto.ListDocumentsResp.Document';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RemoveDocumentReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RemoveDocumentReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.RemoveDocumentReq.displayName = 'proto.proto.RemoveDocumentReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RemoveDocumentResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RemoveDocumentResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.RemoveDocumentResp.displayName = 'proto.proto.RemoveDocumentResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.DownloadDocE2EReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.DownloadDocE2EReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.DownloadDocE2EReq.displayName = 'proto.proto.DownloadDocE2EReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.DownloadDocE2EResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.DownloadDocE2EResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.DownloadDocE2EResp.displayName = 'proto.proto.DownloadDocE2EResp';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.UploadDocStreamReq.oneofGroups_ = [[1,2,3,4,5]];

/**
 * @enum {number}
 */
proto.proto.UploadDocStreamReq.NameordataCase = {
  NAMEORDATA_NOT_SET: 0,
  DOCNAME: 1,
  PLAINTEXT: 2,
  PREMETADATA: 3,
  DATA: 4,
  POSTMETADATA: 5
};

/**
 * @return {proto.proto.UploadDocStreamReq.NameordataCase}
 */
proto.proto.UploadDocStreamReq.prototype.getNameordataCase = function() {
  return /** @type {proto.proto.UploadDocStreamReq.NameordataCase} */(jspb.Message.computeOneofCase(this, proto.proto.UploadDocStreamReq.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UploadDocStreamReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UploadDocStreamReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UploadDocStreamReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UploadDocStreamReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    docname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    plaintext: msg.getPlaintext_asB64(),
    premetadata: (f = msg.getPremetadata()) && proto.proto.UploadDocPreMetadata.toObject(includeInstance, f),
    data: msg.getData_asB64(),
    postmetadata: (f = msg.getPostmetadata()) && proto.proto.UploadDocPostMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UploadDocStreamReq}
 */
proto.proto.UploadDocStreamReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UploadDocStreamReq;
  return proto.proto.UploadDocStreamReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UploadDocStreamReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UploadDocStreamReq}
 */
proto.proto.UploadDocStreamReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocname(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPlaintext(value);
      break;
    case 3:
      var value = new proto.proto.UploadDocPreMetadata;
      reader.readMessage(value,proto.proto.UploadDocPreMetadata.deserializeBinaryFromReader);
      msg.setPremetadata(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 5:
      var value = new proto.proto.UploadDocPostMetadata;
      reader.readMessage(value,proto.proto.UploadDocPostMetadata.deserializeBinaryFromReader);
      msg.setPostmetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UploadDocStreamReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UploadDocStreamReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UploadDocStreamReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UploadDocStreamReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPremetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.UploadDocPreMetadata.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getPostmetadata();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.UploadDocPostMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional string docName = 1;
 * @return {string}
 */
proto.proto.UploadDocStreamReq.prototype.getDocname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UploadDocStreamReq} returns this
 */
proto.proto.UploadDocStreamReq.prototype.setDocname = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.proto.UploadDocStreamReq.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.UploadDocStreamReq} returns this
 */
proto.proto.UploadDocStreamReq.prototype.clearDocname = function() {
  return jspb.Message.setOneofField(this, 1, proto.proto.UploadDocStreamReq.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UploadDocStreamReq.prototype.hasDocname = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes plaintext = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.UploadDocStreamReq.prototype.getPlaintext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes plaintext = 2;
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {string}
 */
proto.proto.UploadDocStreamReq.prototype.getPlaintext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPlaintext()));
};


/**
 * optional bytes plaintext = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {!Uint8Array}
 */
proto.proto.UploadDocStreamReq.prototype.getPlaintext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPlaintext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.UploadDocStreamReq} returns this
 */
proto.proto.UploadDocStreamReq.prototype.setPlaintext = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.proto.UploadDocStreamReq.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.UploadDocStreamReq} returns this
 */
proto.proto.UploadDocStreamReq.prototype.clearPlaintext = function() {
  return jspb.Message.setOneofField(this, 2, proto.proto.UploadDocStreamReq.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UploadDocStreamReq.prototype.hasPlaintext = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional UploadDocPreMetadata preMetadata = 3;
 * @return {?proto.proto.UploadDocPreMetadata}
 */
proto.proto.UploadDocStreamReq.prototype.getPremetadata = function() {
  return /** @type{?proto.proto.UploadDocPreMetadata} */ (
    jspb.Message.getWrapperField(this, proto.proto.UploadDocPreMetadata, 3));
};


/**
 * @param {?proto.proto.UploadDocPreMetadata|undefined} value
 * @return {!proto.proto.UploadDocStreamReq} returns this
*/
proto.proto.UploadDocStreamReq.prototype.setPremetadata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.proto.UploadDocStreamReq.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UploadDocStreamReq} returns this
 */
proto.proto.UploadDocStreamReq.prototype.clearPremetadata = function() {
  return this.setPremetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UploadDocStreamReq.prototype.hasPremetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.proto.UploadDocStreamReq.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.proto.UploadDocStreamReq.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.proto.UploadDocStreamReq.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.UploadDocStreamReq} returns this
 */
proto.proto.UploadDocStreamReq.prototype.setData = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.proto.UploadDocStreamReq.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.UploadDocStreamReq} returns this
 */
proto.proto.UploadDocStreamReq.prototype.clearData = function() {
  return jspb.Message.setOneofField(this, 4, proto.proto.UploadDocStreamReq.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UploadDocStreamReq.prototype.hasData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional UploadDocPostMetadata postMetadata = 5;
 * @return {?proto.proto.UploadDocPostMetadata}
 */
proto.proto.UploadDocStreamReq.prototype.getPostmetadata = function() {
  return /** @type{?proto.proto.UploadDocPostMetadata} */ (
    jspb.Message.getWrapperField(this, proto.proto.UploadDocPostMetadata, 5));
};


/**
 * @param {?proto.proto.UploadDocPostMetadata|undefined} value
 * @return {!proto.proto.UploadDocStreamReq} returns this
*/
proto.proto.UploadDocStreamReq.prototype.setPostmetadata = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.proto.UploadDocStreamReq.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UploadDocStreamReq} returns this
 */
proto.proto.UploadDocStreamReq.prototype.clearPostmetadata = function() {
  return this.setPostmetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UploadDocStreamReq.prototype.hasPostmetadata = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.UploadDocPreMetadata.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UploadDocPreMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UploadDocPreMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UploadDocPreMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UploadDocPreMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    docname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientside: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    userencdockey: (f = msg.getUserencdockey()) && encryption_pb.EncryptedKey.toObject(includeInstance, f),
    userencmackey: (f = msg.getUserencmackey()) && encryption_pb.EncryptedKey.toObject(includeInstance, f),
    orgencdockeysList: jspb.Message.toObjectList(msg.getOrgencdockeysList(),
    encryption_pb.EncryptedKey.toObject, includeInstance),
    orgencmackeysList: jspb.Message.toObjectList(msg.getOrgencmackeysList(),
    encryption_pb.EncryptedKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UploadDocPreMetadata}
 */
proto.proto.UploadDocPreMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UploadDocPreMetadata;
  return proto.proto.UploadDocPreMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UploadDocPreMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UploadDocPreMetadata}
 */
proto.proto.UploadDocPreMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocname(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClientside(value);
      break;
    case 3:
      var value = new encryption_pb.EncryptedKey;
      reader.readMessage(value,encryption_pb.EncryptedKey.deserializeBinaryFromReader);
      msg.setUserencdockey(value);
      break;
    case 4:
      var value = new encryption_pb.EncryptedKey;
      reader.readMessage(value,encryption_pb.EncryptedKey.deserializeBinaryFromReader);
      msg.setUserencmackey(value);
      break;
    case 5:
      var value = new encryption_pb.EncryptedKey;
      reader.readMessage(value,encryption_pb.EncryptedKey.deserializeBinaryFromReader);
      msg.addOrgencdockeys(value);
      break;
    case 6:
      var value = new encryption_pb.EncryptedKey;
      reader.readMessage(value,encryption_pb.EncryptedKey.deserializeBinaryFromReader);
      msg.addOrgencmackeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UploadDocPreMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UploadDocPreMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UploadDocPreMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UploadDocPreMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientside();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getUserencdockey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      encryption_pb.EncryptedKey.serializeBinaryToWriter
    );
  }
  f = message.getUserencmackey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      encryption_pb.EncryptedKey.serializeBinaryToWriter
    );
  }
  f = message.getOrgencdockeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      encryption_pb.EncryptedKey.serializeBinaryToWriter
    );
  }
  f = message.getOrgencmackeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      encryption_pb.EncryptedKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional string docName = 1;
 * @return {string}
 */
proto.proto.UploadDocPreMetadata.prototype.getDocname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UploadDocPreMetadata} returns this
 */
proto.proto.UploadDocPreMetadata.prototype.setDocname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool clientSide = 2;
 * @return {boolean}
 */
proto.proto.UploadDocPreMetadata.prototype.getClientside = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.UploadDocPreMetadata} returns this
 */
proto.proto.UploadDocPreMetadata.prototype.setClientside = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional EncryptedKey userEncDocKey = 3;
 * @return {?proto.proto.EncryptedKey}
 */
proto.proto.UploadDocPreMetadata.prototype.getUserencdockey = function() {
  return /** @type{?proto.proto.EncryptedKey} */ (
    jspb.Message.getWrapperField(this, encryption_pb.EncryptedKey, 3));
};


/**
 * @param {?proto.proto.EncryptedKey|undefined} value
 * @return {!proto.proto.UploadDocPreMetadata} returns this
*/
proto.proto.UploadDocPreMetadata.prototype.setUserencdockey = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UploadDocPreMetadata} returns this
 */
proto.proto.UploadDocPreMetadata.prototype.clearUserencdockey = function() {
  return this.setUserencdockey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UploadDocPreMetadata.prototype.hasUserencdockey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EncryptedKey userEncMACKey = 4;
 * @return {?proto.proto.EncryptedKey}
 */
proto.proto.UploadDocPreMetadata.prototype.getUserencmackey = function() {
  return /** @type{?proto.proto.EncryptedKey} */ (
    jspb.Message.getWrapperField(this, encryption_pb.EncryptedKey, 4));
};


/**
 * @param {?proto.proto.EncryptedKey|undefined} value
 * @return {!proto.proto.UploadDocPreMetadata} returns this
*/
proto.proto.UploadDocPreMetadata.prototype.setUserencmackey = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UploadDocPreMetadata} returns this
 */
proto.proto.UploadDocPreMetadata.prototype.clearUserencmackey = function() {
  return this.setUserencmackey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UploadDocPreMetadata.prototype.hasUserencmackey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated EncryptedKey orgEncDocKeys = 5;
 * @return {!Array<!proto.proto.EncryptedKey>}
 */
proto.proto.UploadDocPreMetadata.prototype.getOrgencdockeysList = function() {
  return /** @type{!Array<!proto.proto.EncryptedKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, encryption_pb.EncryptedKey, 5));
};


/**
 * @param {!Array<!proto.proto.EncryptedKey>} value
 * @return {!proto.proto.UploadDocPreMetadata} returns this
*/
proto.proto.UploadDocPreMetadata.prototype.setOrgencdockeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.EncryptedKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.EncryptedKey}
 */
proto.proto.UploadDocPreMetadata.prototype.addOrgencdockeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.EncryptedKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.UploadDocPreMetadata} returns this
 */
proto.proto.UploadDocPreMetadata.prototype.clearOrgencdockeysList = function() {
  return this.setOrgencdockeysList([]);
};


/**
 * repeated EncryptedKey orgEncMACKeys = 6;
 * @return {!Array<!proto.proto.EncryptedKey>}
 */
proto.proto.UploadDocPreMetadata.prototype.getOrgencmackeysList = function() {
  return /** @type{!Array<!proto.proto.EncryptedKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, encryption_pb.EncryptedKey, 6));
};


/**
 * @param {!Array<!proto.proto.EncryptedKey>} value
 * @return {!proto.proto.UploadDocPreMetadata} returns this
*/
proto.proto.UploadDocPreMetadata.prototype.setOrgencmackeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.proto.EncryptedKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.EncryptedKey}
 */
proto.proto.UploadDocPreMetadata.prototype.addOrgencmackeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.proto.EncryptedKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.UploadDocPreMetadata} returns this
 */
proto.proto.UploadDocPreMetadata.prototype.clearOrgencmackeysList = function() {
  return this.setOrgencmackeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UploadDocPostMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UploadDocPostMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UploadDocPostMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UploadDocPostMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    mac: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UploadDocPostMetadata}
 */
proto.proto.UploadDocPostMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UploadDocPostMetadata;
  return proto.proto.UploadDocPostMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UploadDocPostMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UploadDocPostMetadata}
 */
proto.proto.UploadDocPostMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMac(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UploadDocPostMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UploadDocPostMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UploadDocPostMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UploadDocPostMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMac();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string mac = 1;
 * @return {string}
 */
proto.proto.UploadDocPostMetadata.prototype.getMac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UploadDocPostMetadata} returns this
 */
proto.proto.UploadDocPostMetadata.prototype.setMac = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UploadDocStreamResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UploadDocStreamResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UploadDocStreamResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UploadDocStreamResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    bytes: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UploadDocStreamResp}
 */
proto.proto.UploadDocStreamResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UploadDocStreamResp;
  return proto.proto.UploadDocStreamResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UploadDocStreamResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UploadDocStreamResp}
 */
proto.proto.UploadDocStreamResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UploadDocStreamResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UploadDocStreamResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UploadDocStreamResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UploadDocStreamResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBytes();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.UploadDocStreamResp.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UploadDocStreamResp} returns this
 */
proto.proto.UploadDocStreamResp.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 bytes = 2;
 * @return {number}
 */
proto.proto.UploadDocStreamResp.prototype.getBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.UploadDocStreamResp} returns this
 */
proto.proto.UploadDocStreamResp.prototype.setBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PrepareDownloadDocReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PrepareDownloadDocReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PrepareDownloadDocReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PrepareDownloadDocReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PrepareDownloadDocReq}
 */
proto.proto.PrepareDownloadDocReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PrepareDownloadDocReq;
  return proto.proto.PrepareDownloadDocReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PrepareDownloadDocReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PrepareDownloadDocReq}
 */
proto.proto.PrepareDownloadDocReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PrepareDownloadDocReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PrepareDownloadDocReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PrepareDownloadDocReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PrepareDownloadDocReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.PrepareDownloadDocReq.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.PrepareDownloadDocReq} returns this
 */
proto.proto.PrepareDownloadDocReq.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PrepareDownloadDocResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PrepareDownloadDocResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PrepareDownloadDocResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PrepareDownloadDocResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    documentaccessmetadata: (f = msg.getDocumentaccessmetadata()) && proto.proto.DocumentAccessMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PrepareDownloadDocResp}
 */
proto.proto.PrepareDownloadDocResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PrepareDownloadDocResp;
  return proto.proto.PrepareDownloadDocResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PrepareDownloadDocResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PrepareDownloadDocResp}
 */
proto.proto.PrepareDownloadDocResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.DocumentAccessMetadata;
      reader.readMessage(value,proto.proto.DocumentAccessMetadata.deserializeBinaryFromReader);
      msg.setDocumentaccessmetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PrepareDownloadDocResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PrepareDownloadDocResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PrepareDownloadDocResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PrepareDownloadDocResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocumentaccessmetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.DocumentAccessMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional DocumentAccessMetadata documentAccessMetadata = 1;
 * @return {?proto.proto.DocumentAccessMetadata}
 */
proto.proto.PrepareDownloadDocResp.prototype.getDocumentaccessmetadata = function() {
  return /** @type{?proto.proto.DocumentAccessMetadata} */ (
    jspb.Message.getWrapperField(this, proto.proto.DocumentAccessMetadata, 1));
};


/**
 * @param {?proto.proto.DocumentAccessMetadata|undefined} value
 * @return {!proto.proto.PrepareDownloadDocResp} returns this
*/
proto.proto.PrepareDownloadDocResp.prototype.setDocumentaccessmetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.PrepareDownloadDocResp} returns this
 */
proto.proto.PrepareDownloadDocResp.prototype.clearDocumentaccessmetadata = function() {
  return this.setDocumentaccessmetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PrepareDownloadDocResp.prototype.hasDocumentaccessmetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.DownloadDocStreamReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.DownloadDocStreamReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.DownloadDocStreamReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DownloadDocStreamReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.DownloadDocStreamReq}
 */
proto.proto.DownloadDocStreamReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.DownloadDocStreamReq;
  return proto.proto.DownloadDocStreamReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.DownloadDocStreamReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.DownloadDocStreamReq}
 */
proto.proto.DownloadDocStreamReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.DownloadDocStreamReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.DownloadDocStreamReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.DownloadDocStreamReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DownloadDocStreamReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.DownloadDocStreamReq.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DownloadDocStreamReq} returns this
 */
proto.proto.DownloadDocStreamReq.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.DownloadDocStreamResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.DownloadDocStreamResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.DownloadDocStreamResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DownloadDocStreamResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    plaintext: msg.getPlaintext_asB64(),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.DownloadDocStreamResp}
 */
proto.proto.DownloadDocStreamResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.DownloadDocStreamResp;
  return proto.proto.DownloadDocStreamResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.DownloadDocStreamResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.DownloadDocStreamResp}
 */
proto.proto.DownloadDocStreamResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPlaintext(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.DownloadDocStreamResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.DownloadDocStreamResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.DownloadDocStreamResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DownloadDocStreamResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlaintext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.DownloadDocStreamResp.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DownloadDocStreamResp} returns this
 */
proto.proto.DownloadDocStreamResp.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes plaintext = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.DownloadDocStreamResp.prototype.getPlaintext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes plaintext = 2;
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {string}
 */
proto.proto.DownloadDocStreamResp.prototype.getPlaintext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPlaintext()));
};


/**
 * optional bytes plaintext = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {!Uint8Array}
 */
proto.proto.DownloadDocStreamResp.prototype.getPlaintext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPlaintext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.DownloadDocStreamResp} returns this
 */
proto.proto.DownloadDocStreamResp.prototype.setPlaintext = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proto.DownloadDocStreamResp.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.proto.DownloadDocStreamResp.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.proto.DownloadDocStreamResp.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.DownloadDocStreamResp} returns this
 */
proto.proto.DownloadDocStreamResp.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UploadDocReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UploadDocReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UploadDocReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UploadDocReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    docname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    plaintext: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UploadDocReq}
 */
proto.proto.UploadDocReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UploadDocReq;
  return proto.proto.UploadDocReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UploadDocReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UploadDocReq}
 */
proto.proto.UploadDocReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaintext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UploadDocReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UploadDocReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UploadDocReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UploadDocReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlaintext();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string docName = 1;
 * @return {string}
 */
proto.proto.UploadDocReq.prototype.getDocname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UploadDocReq} returns this
 */
proto.proto.UploadDocReq.prototype.setDocname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string plaintext = 2;
 * @return {string}
 */
proto.proto.UploadDocReq.prototype.getPlaintext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UploadDocReq} returns this
 */
proto.proto.UploadDocReq.prototype.setPlaintext = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UploadDocResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UploadDocResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UploadDocResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UploadDocResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UploadDocResp}
 */
proto.proto.UploadDocResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UploadDocResp;
  return proto.proto.UploadDocResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UploadDocResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UploadDocResp}
 */
proto.proto.UploadDocResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UploadDocResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UploadDocResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UploadDocResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UploadDocResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.UploadDocResp.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UploadDocResp} returns this
 */
proto.proto.UploadDocResp.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.DownloadDocReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.DownloadDocReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.DownloadDocReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DownloadDocReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.DownloadDocReq}
 */
proto.proto.DownloadDocReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.DownloadDocReq;
  return proto.proto.DownloadDocReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.DownloadDocReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.DownloadDocReq}
 */
proto.proto.DownloadDocReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.DownloadDocReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.DownloadDocReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.DownloadDocReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DownloadDocReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.DownloadDocReq.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DownloadDocReq} returns this
 */
proto.proto.DownloadDocReq.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.DownloadDocResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.DownloadDocResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.DownloadDocResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DownloadDocResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    plaintext: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.DownloadDocResp}
 */
proto.proto.DownloadDocResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.DownloadDocResp;
  return proto.proto.DownloadDocResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.DownloadDocResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.DownloadDocResp}
 */
proto.proto.DownloadDocResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaintext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.DownloadDocResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.DownloadDocResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.DownloadDocResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DownloadDocResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlaintext();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.DownloadDocResp.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DownloadDocResp} returns this
 */
proto.proto.DownloadDocResp.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string plaintext = 2;
 * @return {string}
 */
proto.proto.DownloadDocResp.prototype.getPlaintext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DownloadDocResp} returns this
 */
proto.proto.DownloadDocResp.prototype.setPlaintext = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.DocumentAccessMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.DocumentAccessMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.DocumentAccessMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DocumentAccessMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    isencryptedbyclientside: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    iskeyorgs: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    encdockey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    dockeyencryptor: jspb.Message.getFieldWithDefault(msg, 4, ""),
    encuserasymkey: jspb.Message.getFieldWithDefault(msg, 5, ""),
    userasymkeyencryptorid: jspb.Message.getFieldWithDefault(msg, 6, ""),
    encmackey: jspb.Message.getFieldWithDefault(msg, 7, ""),
    mac: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.DocumentAccessMetadata}
 */
proto.proto.DocumentAccessMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.DocumentAccessMetadata;
  return proto.proto.DocumentAccessMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.DocumentAccessMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.DocumentAccessMetadata}
 */
proto.proto.DocumentAccessMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsencryptedbyclientside(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIskeyorgs(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncdockey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDockeyencryptor(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncuserasymkey(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserasymkeyencryptorid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncmackey(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMac(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.DocumentAccessMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.DocumentAccessMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.DocumentAccessMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DocumentAccessMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsencryptedbyclientside();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIskeyorgs();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getEncdockey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getDockeyencryptor();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEncuserasymkey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getUserasymkeyencryptorid();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getEncmackey();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMac();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional bool isEncryptedByClientSide = 1;
 * @return {boolean}
 */
proto.proto.DocumentAccessMetadata.prototype.getIsencryptedbyclientside = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.DocumentAccessMetadata} returns this
 */
proto.proto.DocumentAccessMetadata.prototype.setIsencryptedbyclientside = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool isKeyOrgs = 2;
 * @return {boolean}
 */
proto.proto.DocumentAccessMetadata.prototype.getIskeyorgs = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.DocumentAccessMetadata} returns this
 */
proto.proto.DocumentAccessMetadata.prototype.setIskeyorgs = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional string encDocKey = 3;
 * @return {string}
 */
proto.proto.DocumentAccessMetadata.prototype.getEncdockey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DocumentAccessMetadata} returns this
 */
proto.proto.DocumentAccessMetadata.prototype.setEncdockey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string docKeyEncryptor = 4;
 * @return {string}
 */
proto.proto.DocumentAccessMetadata.prototype.getDockeyencryptor = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DocumentAccessMetadata} returns this
 */
proto.proto.DocumentAccessMetadata.prototype.setDockeyencryptor = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string encUserAsymKey = 5;
 * @return {string}
 */
proto.proto.DocumentAccessMetadata.prototype.getEncuserasymkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DocumentAccessMetadata} returns this
 */
proto.proto.DocumentAccessMetadata.prototype.setEncuserasymkey = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string userAsymKeyEncryptorId = 6;
 * @return {string}
 */
proto.proto.DocumentAccessMetadata.prototype.getUserasymkeyencryptorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DocumentAccessMetadata} returns this
 */
proto.proto.DocumentAccessMetadata.prototype.setUserasymkeyencryptorid = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string encMACKey = 7;
 * @return {string}
 */
proto.proto.DocumentAccessMetadata.prototype.getEncmackey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DocumentAccessMetadata} returns this
 */
proto.proto.DocumentAccessMetadata.prototype.setEncmackey = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string mac = 8;
 * @return {string}
 */
proto.proto.DocumentAccessMetadata.prototype.getMac = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DocumentAccessMetadata} returns this
 */
proto.proto.DocumentAccessMetadata.prototype.setMac = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PrepareShareDocumentReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PrepareShareDocumentReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PrepareShareDocumentReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PrepareShareDocumentReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PrepareShareDocumentReq}
 */
proto.proto.PrepareShareDocumentReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PrepareShareDocumentReq;
  return proto.proto.PrepareShareDocumentReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PrepareShareDocumentReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PrepareShareDocumentReq}
 */
proto.proto.PrepareShareDocumentReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PrepareShareDocumentReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PrepareShareDocumentReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PrepareShareDocumentReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PrepareShareDocumentReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.PrepareShareDocumentReq.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.PrepareShareDocumentReq} returns this
 */
proto.proto.PrepareShareDocumentReq.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userID = 2;
 * @return {string}
 */
proto.proto.PrepareShareDocumentReq.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.PrepareShareDocumentReq} returns this
 */
proto.proto.PrepareShareDocumentReq.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.PrepareShareDocumentResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.PrepareShareDocumentResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.PrepareShareDocumentResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PrepareShareDocumentResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    documentaccessmetadata: (f = msg.getDocumentaccessmetadata()) && proto.proto.DocumentAccessMetadata.toObject(includeInstance, f),
    touserpubkeys: (f = msg.getTouserpubkeys()) && encryption_pb.UserPubKeys.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.PrepareShareDocumentResp}
 */
proto.proto.PrepareShareDocumentResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.PrepareShareDocumentResp;
  return proto.proto.PrepareShareDocumentResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.PrepareShareDocumentResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.PrepareShareDocumentResp}
 */
proto.proto.PrepareShareDocumentResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.DocumentAccessMetadata;
      reader.readMessage(value,proto.proto.DocumentAccessMetadata.deserializeBinaryFromReader);
      msg.setDocumentaccessmetadata(value);
      break;
    case 2:
      var value = new encryption_pb.UserPubKeys;
      reader.readMessage(value,encryption_pb.UserPubKeys.deserializeBinaryFromReader);
      msg.setTouserpubkeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.PrepareShareDocumentResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.PrepareShareDocumentResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.PrepareShareDocumentResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.PrepareShareDocumentResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocumentaccessmetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.DocumentAccessMetadata.serializeBinaryToWriter
    );
  }
  f = message.getTouserpubkeys();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      encryption_pb.UserPubKeys.serializeBinaryToWriter
    );
  }
};


/**
 * optional DocumentAccessMetadata documentAccessMetadata = 1;
 * @return {?proto.proto.DocumentAccessMetadata}
 */
proto.proto.PrepareShareDocumentResp.prototype.getDocumentaccessmetadata = function() {
  return /** @type{?proto.proto.DocumentAccessMetadata} */ (
    jspb.Message.getWrapperField(this, proto.proto.DocumentAccessMetadata, 1));
};


/**
 * @param {?proto.proto.DocumentAccessMetadata|undefined} value
 * @return {!proto.proto.PrepareShareDocumentResp} returns this
*/
proto.proto.PrepareShareDocumentResp.prototype.setDocumentaccessmetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.PrepareShareDocumentResp} returns this
 */
proto.proto.PrepareShareDocumentResp.prototype.clearDocumentaccessmetadata = function() {
  return this.setDocumentaccessmetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PrepareShareDocumentResp.prototype.hasDocumentaccessmetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UserPubKeys toUserPubKeys = 2;
 * @return {?proto.proto.UserPubKeys}
 */
proto.proto.PrepareShareDocumentResp.prototype.getTouserpubkeys = function() {
  return /** @type{?proto.proto.UserPubKeys} */ (
    jspb.Message.getWrapperField(this, encryption_pb.UserPubKeys, 2));
};


/**
 * @param {?proto.proto.UserPubKeys|undefined} value
 * @return {!proto.proto.PrepareShareDocumentResp} returns this
*/
proto.proto.PrepareShareDocumentResp.prototype.setTouserpubkeys = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.PrepareShareDocumentResp} returns this
 */
proto.proto.PrepareShareDocumentResp.prototype.clearTouserpubkeys = function() {
  return this.setTouserpubkeys(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.PrepareShareDocumentResp.prototype.hasTouserpubkeys = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ShareDocumentReq.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ShareDocumentReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ShareDocumentReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ShareDocumentReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ShareDocumentReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userencdockey: (f = msg.getUserencdockey()) && encryption_pb.EncryptedKey.toObject(includeInstance, f),
    userencmackey: (f = msg.getUserencmackey()) && encryption_pb.EncryptedKey.toObject(includeInstance, f),
    orgencdockeysList: jspb.Message.toObjectList(msg.getOrgencdockeysList(),
    encryption_pb.EncryptedKey.toObject, includeInstance),
    orgencmackeysList: jspb.Message.toObjectList(msg.getOrgencmackeysList(),
    encryption_pb.EncryptedKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ShareDocumentReq}
 */
proto.proto.ShareDocumentReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ShareDocumentReq;
  return proto.proto.ShareDocumentReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ShareDocumentReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ShareDocumentReq}
 */
proto.proto.ShareDocumentReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = new encryption_pb.EncryptedKey;
      reader.readMessage(value,encryption_pb.EncryptedKey.deserializeBinaryFromReader);
      msg.setUserencdockey(value);
      break;
    case 4:
      var value = new encryption_pb.EncryptedKey;
      reader.readMessage(value,encryption_pb.EncryptedKey.deserializeBinaryFromReader);
      msg.setUserencmackey(value);
      break;
    case 5:
      var value = new encryption_pb.EncryptedKey;
      reader.readMessage(value,encryption_pb.EncryptedKey.deserializeBinaryFromReader);
      msg.addOrgencdockeys(value);
      break;
    case 6:
      var value = new encryption_pb.EncryptedKey;
      reader.readMessage(value,encryption_pb.EncryptedKey.deserializeBinaryFromReader);
      msg.addOrgencmackeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ShareDocumentReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ShareDocumentReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ShareDocumentReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ShareDocumentReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserencdockey();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      encryption_pb.EncryptedKey.serializeBinaryToWriter
    );
  }
  f = message.getUserencmackey();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      encryption_pb.EncryptedKey.serializeBinaryToWriter
    );
  }
  f = message.getOrgencdockeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      encryption_pb.EncryptedKey.serializeBinaryToWriter
    );
  }
  f = message.getOrgencmackeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      encryption_pb.EncryptedKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.ShareDocumentReq.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.ShareDocumentReq} returns this
 */
proto.proto.ShareDocumentReq.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userID = 2;
 * @return {string}
 */
proto.proto.ShareDocumentReq.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.ShareDocumentReq} returns this
 */
proto.proto.ShareDocumentReq.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional EncryptedKey userEncDocKey = 3;
 * @return {?proto.proto.EncryptedKey}
 */
proto.proto.ShareDocumentReq.prototype.getUserencdockey = function() {
  return /** @type{?proto.proto.EncryptedKey} */ (
    jspb.Message.getWrapperField(this, encryption_pb.EncryptedKey, 3));
};


/**
 * @param {?proto.proto.EncryptedKey|undefined} value
 * @return {!proto.proto.ShareDocumentReq} returns this
*/
proto.proto.ShareDocumentReq.prototype.setUserencdockey = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ShareDocumentReq} returns this
 */
proto.proto.ShareDocumentReq.prototype.clearUserencdockey = function() {
  return this.setUserencdockey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ShareDocumentReq.prototype.hasUserencdockey = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional EncryptedKey userEncMACKey = 4;
 * @return {?proto.proto.EncryptedKey}
 */
proto.proto.ShareDocumentReq.prototype.getUserencmackey = function() {
  return /** @type{?proto.proto.EncryptedKey} */ (
    jspb.Message.getWrapperField(this, encryption_pb.EncryptedKey, 4));
};


/**
 * @param {?proto.proto.EncryptedKey|undefined} value
 * @return {!proto.proto.ShareDocumentReq} returns this
*/
proto.proto.ShareDocumentReq.prototype.setUserencmackey = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ShareDocumentReq} returns this
 */
proto.proto.ShareDocumentReq.prototype.clearUserencmackey = function() {
  return this.setUserencmackey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ShareDocumentReq.prototype.hasUserencmackey = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated EncryptedKey orgEncDocKeys = 5;
 * @return {!Array<!proto.proto.EncryptedKey>}
 */
proto.proto.ShareDocumentReq.prototype.getOrgencdockeysList = function() {
  return /** @type{!Array<!proto.proto.EncryptedKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, encryption_pb.EncryptedKey, 5));
};


/**
 * @param {!Array<!proto.proto.EncryptedKey>} value
 * @return {!proto.proto.ShareDocumentReq} returns this
*/
proto.proto.ShareDocumentReq.prototype.setOrgencdockeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.EncryptedKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.EncryptedKey}
 */
proto.proto.ShareDocumentReq.prototype.addOrgencdockeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.EncryptedKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.ShareDocumentReq} returns this
 */
proto.proto.ShareDocumentReq.prototype.clearOrgencdockeysList = function() {
  return this.setOrgencdockeysList([]);
};


/**
 * repeated EncryptedKey orgEncMACKeys = 6;
 * @return {!Array<!proto.proto.EncryptedKey>}
 */
proto.proto.ShareDocumentReq.prototype.getOrgencmackeysList = function() {
  return /** @type{!Array<!proto.proto.EncryptedKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, encryption_pb.EncryptedKey, 6));
};


/**
 * @param {!Array<!proto.proto.EncryptedKey>} value
 * @return {!proto.proto.ShareDocumentReq} returns this
*/
proto.proto.ShareDocumentReq.prototype.setOrgencmackeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.proto.EncryptedKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.EncryptedKey}
 */
proto.proto.ShareDocumentReq.prototype.addOrgencmackeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.proto.EncryptedKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.ShareDocumentReq} returns this
 */
proto.proto.ShareDocumentReq.prototype.clearOrgencmackeysList = function() {
  return this.setOrgencmackeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ShareDocumentResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ShareDocumentResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ShareDocumentResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ShareDocumentResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ShareDocumentResp}
 */
proto.proto.ShareDocumentResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ShareDocumentResp;
  return proto.proto.ShareDocumentResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ShareDocumentResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ShareDocumentResp}
 */
proto.proto.ShareDocumentResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ShareDocumentResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ShareDocumentResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ShareDocumentResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ShareDocumentResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.proto.ShareDocumentResp.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.ShareDocumentResp} returns this
 */
proto.proto.ShareDocumentResp.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UnshareDocumentReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UnshareDocumentReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UnshareDocumentReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UnshareDocumentReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UnshareDocumentReq}
 */
proto.proto.UnshareDocumentReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UnshareDocumentReq;
  return proto.proto.UnshareDocumentReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UnshareDocumentReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UnshareDocumentReq}
 */
proto.proto.UnshareDocumentReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UnshareDocumentReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UnshareDocumentReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UnshareDocumentReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UnshareDocumentReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.UnshareDocumentReq.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UnshareDocumentReq} returns this
 */
proto.proto.UnshareDocumentReq.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userID = 2;
 * @return {string}
 */
proto.proto.UnshareDocumentReq.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UnshareDocumentReq} returns this
 */
proto.proto.UnshareDocumentReq.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UnshareDocumentResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UnshareDocumentResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UnshareDocumentResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UnshareDocumentResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UnshareDocumentResp}
 */
proto.proto.UnshareDocumentResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UnshareDocumentResp;
  return proto.proto.UnshareDocumentResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UnshareDocumentResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UnshareDocumentResp}
 */
proto.proto.UnshareDocumentResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UnshareDocumentResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UnshareDocumentResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UnshareDocumentResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UnshareDocumentResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 count = 1;
 * @return {number}
 */
proto.proto.UnshareDocumentResp.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.UnshareDocumentResp} returns this
 */
proto.proto.UnshareDocumentResp.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ListDocumentsReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ListDocumentsReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ListDocumentsReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ListDocumentsReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ListDocumentsReq}
 */
proto.proto.ListDocumentsReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ListDocumentsReq;
  return proto.proto.ListDocumentsReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ListDocumentsReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ListDocumentsReq}
 */
proto.proto.ListDocumentsReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ListDocumentsReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ListDocumentsReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ListDocumentsReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ListDocumentsReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ListDocumentsResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ListDocumentsResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ListDocumentsResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ListDocumentsResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ListDocumentsResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    documentsList: jspb.Message.toObjectList(msg.getDocumentsList(),
    proto.proto.ListDocumentsResp.Document.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ListDocumentsResp}
 */
proto.proto.ListDocumentsResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ListDocumentsResp;
  return proto.proto.ListDocumentsResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ListDocumentsResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ListDocumentsResp}
 */
proto.proto.ListDocumentsResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.ListDocumentsResp.Document;
      reader.readMessage(value,proto.proto.ListDocumentsResp.Document.deserializeBinaryFromReader);
      msg.addDocuments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ListDocumentsResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ListDocumentsResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ListDocumentsResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ListDocumentsResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocumentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.ListDocumentsResp.Document.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ListDocumentsResp.Document.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ListDocumentsResp.Document.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ListDocumentsResp.Document} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ListDocumentsResp.Document.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    docname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    size: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ListDocumentsResp.Document}
 */
proto.proto.ListDocumentsResp.Document.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ListDocumentsResp.Document;
  return proto.proto.ListDocumentsResp.Document.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ListDocumentsResp.Document} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ListDocumentsResp.Document}
 */
proto.proto.ListDocumentsResp.Document.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ListDocumentsResp.Document.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ListDocumentsResp.Document.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ListDocumentsResp.Document} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ListDocumentsResp.Document.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDocname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.ListDocumentsResp.Document.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.ListDocumentsResp.Document} returns this
 */
proto.proto.ListDocumentsResp.Document.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string docName = 2;
 * @return {string}
 */
proto.proto.ListDocumentsResp.Document.prototype.getDocname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.ListDocumentsResp.Document} returns this
 */
proto.proto.ListDocumentsResp.Document.prototype.setDocname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 size = 3;
 * @return {number}
 */
proto.proto.ListDocumentsResp.Document.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ListDocumentsResp.Document} returns this
 */
proto.proto.ListDocumentsResp.Document.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated Document documents = 1;
 * @return {!Array<!proto.proto.ListDocumentsResp.Document>}
 */
proto.proto.ListDocumentsResp.prototype.getDocumentsList = function() {
  return /** @type{!Array<!proto.proto.ListDocumentsResp.Document>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ListDocumentsResp.Document, 1));
};


/**
 * @param {!Array<!proto.proto.ListDocumentsResp.Document>} value
 * @return {!proto.proto.ListDocumentsResp} returns this
*/
proto.proto.ListDocumentsResp.prototype.setDocumentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.ListDocumentsResp.Document=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ListDocumentsResp.Document}
 */
proto.proto.ListDocumentsResp.prototype.addDocuments = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.ListDocumentsResp.Document, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.ListDocumentsResp} returns this
 */
proto.proto.ListDocumentsResp.prototype.clearDocumentsList = function() {
  return this.setDocumentsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RemoveDocumentReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RemoveDocumentReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RemoveDocumentReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RemoveDocumentReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RemoveDocumentReq}
 */
proto.proto.RemoveDocumentReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RemoveDocumentReq;
  return proto.proto.RemoveDocumentReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RemoveDocumentReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RemoveDocumentReq}
 */
proto.proto.RemoveDocumentReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RemoveDocumentReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RemoveDocumentReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RemoveDocumentReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RemoveDocumentReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.RemoveDocumentReq.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.RemoveDocumentReq} returns this
 */
proto.proto.RemoveDocumentReq.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RemoveDocumentResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RemoveDocumentResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RemoveDocumentResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RemoveDocumentResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RemoveDocumentResp}
 */
proto.proto.RemoveDocumentResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RemoveDocumentResp;
  return proto.proto.RemoveDocumentResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RemoveDocumentResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RemoveDocumentResp}
 */
proto.proto.RemoveDocumentResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RemoveDocumentResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RemoveDocumentResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RemoveDocumentResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RemoveDocumentResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool status = 1;
 * @return {boolean}
 */
proto.proto.RemoveDocumentResp.prototype.getStatus = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.RemoveDocumentResp} returns this
 */
proto.proto.RemoveDocumentResp.prototype.setStatus = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.DownloadDocE2EReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.DownloadDocE2EReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.DownloadDocE2EReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DownloadDocE2EReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.DownloadDocE2EReq}
 */
proto.proto.DownloadDocE2EReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.DownloadDocE2EReq;
  return proto.proto.DownloadDocE2EReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.DownloadDocE2EReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.DownloadDocE2EReq}
 */
proto.proto.DownloadDocE2EReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.DownloadDocE2EReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.DownloadDocE2EReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.DownloadDocE2EReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DownloadDocE2EReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.DownloadDocE2EReq.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DownloadDocE2EReq} returns this
 */
proto.proto.DownloadDocE2EReq.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.DownloadDocE2EResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.DownloadDocE2EResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.DownloadDocE2EResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DownloadDocE2EResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ciphertext: jspb.Message.getFieldWithDefault(msg, 2, ""),
    encryptedfilekeyuser: jspb.Message.getFieldWithDefault(msg, 3, ""),
    encryptedfilekeyorg: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.DownloadDocE2EResp}
 */
proto.proto.DownloadDocE2EResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.DownloadDocE2EResp;
  return proto.proto.DownloadDocE2EResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.DownloadDocE2EResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.DownloadDocE2EResp}
 */
proto.proto.DownloadDocE2EResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCiphertext(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncryptedfilekeyuser(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncryptedfilekeyorg(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.DownloadDocE2EResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.DownloadDocE2EResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.DownloadDocE2EResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DownloadDocE2EResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCiphertext();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEncryptedfilekeyuser();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEncryptedfilekeyorg();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.DownloadDocE2EResp.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DownloadDocE2EResp} returns this
 */
proto.proto.DownloadDocE2EResp.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cipherText = 2;
 * @return {string}
 */
proto.proto.DownloadDocE2EResp.prototype.getCiphertext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DownloadDocE2EResp} returns this
 */
proto.proto.DownloadDocE2EResp.prototype.setCiphertext = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string encryptedFileKeyUser = 3;
 * @return {string}
 */
proto.proto.DownloadDocE2EResp.prototype.getEncryptedfilekeyuser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DownloadDocE2EResp} returns this
 */
proto.proto.DownloadDocE2EResp.prototype.setEncryptedfilekeyuser = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string encryptedFileKeyOrg = 4;
 * @return {string}
 */
proto.proto.DownloadDocE2EResp.prototype.getEncryptedfilekeyorg = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DownloadDocE2EResp} returns this
 */
proto.proto.DownloadDocE2EResp.prototype.setEncryptedfilekeyorg = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


goog.object.extend(exports, proto.proto);

// source: documentNoStore.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var protoc$gen$swagger_options_annotations_pb = require('./protoc-gen-swagger/options/annotations_pb.js');
goog.object.extend(proto, protoc$gen$swagger_options_annotations_pb);
goog.exportSymbol('proto.proto.DecryptDocReq', null, global);
goog.exportSymbol('proto.proto.DecryptDocResp', null, global);
goog.exportSymbol('proto.proto.DecryptDocStreamReq', null, global);
goog.exportSymbol('proto.proto.DecryptDocStreamReq.IdordataCase', null, global);
goog.exportSymbol('proto.proto.DecryptDocStreamResp', null, global);
goog.exportSymbol('proto.proto.EncryptDocReq', null, global);
goog.exportSymbol('proto.proto.EncryptDocResp', null, global);
goog.exportSymbol('proto.proto.EncryptDocStreamReq', null, global);
goog.exportSymbol('proto.proto.EncryptDocStreamReq.NameordataCase', null, global);
goog.exportSymbol('proto.proto.EncryptDocStreamResp', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.EncryptDocStreamReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.EncryptDocStreamReq.oneofGroups_);
};
goog.inherits(proto.proto.EncryptDocStreamReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.EncryptDocStreamReq.displayName = 'proto.proto.EncryptDocStreamReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.EncryptDocStreamResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.EncryptDocStreamResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.EncryptDocStreamResp.displayName = 'proto.proto.EncryptDocStreamResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.DecryptDocStreamReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.DecryptDocStreamReq.oneofGroups_);
};
goog.inherits(proto.proto.DecryptDocStreamReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.DecryptDocStreamReq.displayName = 'proto.proto.DecryptDocStreamReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.DecryptDocStreamResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.DecryptDocStreamResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.DecryptDocStreamResp.displayName = 'proto.proto.DecryptDocStreamResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.EncryptDocReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.EncryptDocReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.EncryptDocReq.displayName = 'proto.proto.EncryptDocReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.EncryptDocResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.EncryptDocResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.EncryptDocResp.displayName = 'proto.proto.EncryptDocResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.DecryptDocReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.DecryptDocReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.DecryptDocReq.displayName = 'proto.proto.DecryptDocReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.DecryptDocResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.DecryptDocResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.DecryptDocResp.displayName = 'proto.proto.DecryptDocResp';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.EncryptDocStreamReq.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.proto.EncryptDocStreamReq.NameordataCase = {
  NAMEORDATA_NOT_SET: 0,
  DOCNAME: 1,
  PLAINTEXT: 2
};

/**
 * @return {proto.proto.EncryptDocStreamReq.NameordataCase}
 */
proto.proto.EncryptDocStreamReq.prototype.getNameordataCase = function() {
  return /** @type {proto.proto.EncryptDocStreamReq.NameordataCase} */(jspb.Message.computeOneofCase(this, proto.proto.EncryptDocStreamReq.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.EncryptDocStreamReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.EncryptDocStreamReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.EncryptDocStreamReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EncryptDocStreamReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    docname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    plaintext: msg.getPlaintext_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.EncryptDocStreamReq}
 */
proto.proto.EncryptDocStreamReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.EncryptDocStreamReq;
  return proto.proto.EncryptDocStreamReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.EncryptDocStreamReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.EncryptDocStreamReq}
 */
proto.proto.EncryptDocStreamReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocname(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPlaintext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.EncryptDocStreamReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.EncryptDocStreamReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.EncryptDocStreamReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EncryptDocStreamReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string docName = 1;
 * @return {string}
 */
proto.proto.EncryptDocStreamReq.prototype.getDocname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.EncryptDocStreamReq} returns this
 */
proto.proto.EncryptDocStreamReq.prototype.setDocname = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.proto.EncryptDocStreamReq.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.EncryptDocStreamReq} returns this
 */
proto.proto.EncryptDocStreamReq.prototype.clearDocname = function() {
  return jspb.Message.setOneofField(this, 1, proto.proto.EncryptDocStreamReq.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.EncryptDocStreamReq.prototype.hasDocname = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes plaintext = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.EncryptDocStreamReq.prototype.getPlaintext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes plaintext = 2;
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {string}
 */
proto.proto.EncryptDocStreamReq.prototype.getPlaintext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPlaintext()));
};


/**
 * optional bytes plaintext = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {!Uint8Array}
 */
proto.proto.EncryptDocStreamReq.prototype.getPlaintext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPlaintext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.EncryptDocStreamReq} returns this
 */
proto.proto.EncryptDocStreamReq.prototype.setPlaintext = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.proto.EncryptDocStreamReq.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.EncryptDocStreamReq} returns this
 */
proto.proto.EncryptDocStreamReq.prototype.clearPlaintext = function() {
  return jspb.Message.setOneofField(this, 2, proto.proto.EncryptDocStreamReq.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.EncryptDocStreamReq.prototype.hasPlaintext = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.EncryptDocStreamResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.EncryptDocStreamResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.EncryptDocStreamResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EncryptDocStreamResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ciphertext: msg.getCiphertext_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.EncryptDocStreamResp}
 */
proto.proto.EncryptDocStreamResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.EncryptDocStreamResp;
  return proto.proto.EncryptDocStreamResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.EncryptDocStreamResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.EncryptDocStreamResp}
 */
proto.proto.EncryptDocStreamResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCiphertext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.EncryptDocStreamResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.EncryptDocStreamResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.EncryptDocStreamResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EncryptDocStreamResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCiphertext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.EncryptDocStreamResp.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.EncryptDocStreamResp} returns this
 */
proto.proto.EncryptDocStreamResp.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes ciphertext = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.EncryptDocStreamResp.prototype.getCiphertext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ciphertext = 2;
 * This is a type-conversion wrapper around `getCiphertext()`
 * @return {string}
 */
proto.proto.EncryptDocStreamResp.prototype.getCiphertext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCiphertext()));
};


/**
 * optional bytes ciphertext = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCiphertext()`
 * @return {!Uint8Array}
 */
proto.proto.EncryptDocStreamResp.prototype.getCiphertext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCiphertext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.EncryptDocStreamResp} returns this
 */
proto.proto.EncryptDocStreamResp.prototype.setCiphertext = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.DecryptDocStreamReq.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.proto.DecryptDocStreamReq.IdordataCase = {
  IDORDATA_NOT_SET: 0,
  DOCID: 1,
  CIPHERTEXT: 2
};

/**
 * @return {proto.proto.DecryptDocStreamReq.IdordataCase}
 */
proto.proto.DecryptDocStreamReq.prototype.getIdordataCase = function() {
  return /** @type {proto.proto.DecryptDocStreamReq.IdordataCase} */(jspb.Message.computeOneofCase(this, proto.proto.DecryptDocStreamReq.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.DecryptDocStreamReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.DecryptDocStreamReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.DecryptDocStreamReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DecryptDocStreamReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ciphertext: msg.getCiphertext_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.DecryptDocStreamReq}
 */
proto.proto.DecryptDocStreamReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.DecryptDocStreamReq;
  return proto.proto.DecryptDocStreamReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.DecryptDocStreamReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.DecryptDocStreamReq}
 */
proto.proto.DecryptDocStreamReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCiphertext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.DecryptDocStreamReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.DecryptDocStreamReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.DecryptDocStreamReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DecryptDocStreamReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.DecryptDocStreamReq.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DecryptDocStreamReq} returns this
 */
proto.proto.DecryptDocStreamReq.prototype.setDocid = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.proto.DecryptDocStreamReq.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.DecryptDocStreamReq} returns this
 */
proto.proto.DecryptDocStreamReq.prototype.clearDocid = function() {
  return jspb.Message.setOneofField(this, 1, proto.proto.DecryptDocStreamReq.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.DecryptDocStreamReq.prototype.hasDocid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes ciphertext = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.DecryptDocStreamReq.prototype.getCiphertext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ciphertext = 2;
 * This is a type-conversion wrapper around `getCiphertext()`
 * @return {string}
 */
proto.proto.DecryptDocStreamReq.prototype.getCiphertext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCiphertext()));
};


/**
 * optional bytes ciphertext = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCiphertext()`
 * @return {!Uint8Array}
 */
proto.proto.DecryptDocStreamReq.prototype.getCiphertext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCiphertext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.DecryptDocStreamReq} returns this
 */
proto.proto.DecryptDocStreamReq.prototype.setCiphertext = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.proto.DecryptDocStreamReq.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.DecryptDocStreamReq} returns this
 */
proto.proto.DecryptDocStreamReq.prototype.clearCiphertext = function() {
  return jspb.Message.setOneofField(this, 2, proto.proto.DecryptDocStreamReq.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.DecryptDocStreamReq.prototype.hasCiphertext = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.DecryptDocStreamResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.DecryptDocStreamResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.DecryptDocStreamResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DecryptDocStreamResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    plaintext: msg.getPlaintext_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.DecryptDocStreamResp}
 */
proto.proto.DecryptDocStreamResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.DecryptDocStreamResp;
  return proto.proto.DecryptDocStreamResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.DecryptDocStreamResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.DecryptDocStreamResp}
 */
proto.proto.DecryptDocStreamResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPlaintext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.DecryptDocStreamResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.DecryptDocStreamResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.DecryptDocStreamResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DecryptDocStreamResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlaintext_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.DecryptDocStreamResp.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DecryptDocStreamResp} returns this
 */
proto.proto.DecryptDocStreamResp.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bytes plaintext = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.DecryptDocStreamResp.prototype.getPlaintext = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes plaintext = 2;
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {string}
 */
proto.proto.DecryptDocStreamResp.prototype.getPlaintext_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPlaintext()));
};


/**
 * optional bytes plaintext = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPlaintext()`
 * @return {!Uint8Array}
 */
proto.proto.DecryptDocStreamResp.prototype.getPlaintext_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPlaintext()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.DecryptDocStreamResp} returns this
 */
proto.proto.DecryptDocStreamResp.prototype.setPlaintext = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.EncryptDocReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.EncryptDocReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.EncryptDocReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EncryptDocReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    docname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    plaintext: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.EncryptDocReq}
 */
proto.proto.EncryptDocReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.EncryptDocReq;
  return proto.proto.EncryptDocReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.EncryptDocReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.EncryptDocReq}
 */
proto.proto.EncryptDocReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaintext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.EncryptDocReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.EncryptDocReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.EncryptDocReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EncryptDocReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlaintext();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string docName = 1;
 * @return {string}
 */
proto.proto.EncryptDocReq.prototype.getDocname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.EncryptDocReq} returns this
 */
proto.proto.EncryptDocReq.prototype.setDocname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string plaintext = 2;
 * @return {string}
 */
proto.proto.EncryptDocReq.prototype.getPlaintext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.EncryptDocReq} returns this
 */
proto.proto.EncryptDocReq.prototype.setPlaintext = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.EncryptDocResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.EncryptDocResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.EncryptDocResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EncryptDocResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ciphertext: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.EncryptDocResp}
 */
proto.proto.EncryptDocResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.EncryptDocResp;
  return proto.proto.EncryptDocResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.EncryptDocResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.EncryptDocResp}
 */
proto.proto.EncryptDocResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCiphertext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.EncryptDocResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.EncryptDocResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.EncryptDocResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EncryptDocResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCiphertext();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.EncryptDocResp.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.EncryptDocResp} returns this
 */
proto.proto.EncryptDocResp.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ciphertext = 2;
 * @return {string}
 */
proto.proto.EncryptDocResp.prototype.getCiphertext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.EncryptDocResp} returns this
 */
proto.proto.EncryptDocResp.prototype.setCiphertext = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.DecryptDocReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.DecryptDocReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.DecryptDocReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DecryptDocReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    ciphertext: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.DecryptDocReq}
 */
proto.proto.DecryptDocReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.DecryptDocReq;
  return proto.proto.DecryptDocReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.DecryptDocReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.DecryptDocReq}
 */
proto.proto.DecryptDocReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCiphertext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.DecryptDocReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.DecryptDocReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.DecryptDocReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DecryptDocReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCiphertext();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.DecryptDocReq.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DecryptDocReq} returns this
 */
proto.proto.DecryptDocReq.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string ciphertext = 2;
 * @return {string}
 */
proto.proto.DecryptDocReq.prototype.getCiphertext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DecryptDocReq} returns this
 */
proto.proto.DecryptDocReq.prototype.setCiphertext = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.DecryptDocResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.DecryptDocResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.DecryptDocResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DecryptDocResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    docid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    plaintext: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.DecryptDocResp}
 */
proto.proto.DecryptDocResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.DecryptDocResp;
  return proto.proto.DecryptDocResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.DecryptDocResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.DecryptDocResp}
 */
proto.proto.DecryptDocResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDocid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlaintext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.DecryptDocResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.DecryptDocResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.DecryptDocResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DecryptDocResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDocid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlaintext();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string docID = 1;
 * @return {string}
 */
proto.proto.DecryptDocResp.prototype.getDocid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DecryptDocResp} returns this
 */
proto.proto.DecryptDocResp.prototype.setDocid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string plaintext = 2;
 * @return {string}
 */
proto.proto.DecryptDocResp.prototype.getPlaintext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DecryptDocResp} returns this
 */
proto.proto.DecryptDocResp.prototype.setPlaintext = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.proto);

// source: encryption.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var protoc$gen$swagger_options_annotations_pb = require('./protoc-gen-swagger/options/annotations_pb.js');
goog.object.extend(proto, protoc$gen$swagger_options_annotations_pb);
goog.exportSymbol('proto.proto.DocEncFileKeyE2E', null, global);
goog.exportSymbol('proto.proto.EnableE2EReq', null, global);
goog.exportSymbol('proto.proto.EnableE2EResp', null, global);
goog.exportSymbol('proto.proto.EncryptedKey', null, global);
goog.exportSymbol('proto.proto.GetFileKeysE2eReq', null, global);
goog.exportSymbol('proto.proto.GetFileKeysE2eResp', null, global);
goog.exportSymbol('proto.proto.GetKeyE2eReq', null, global);
goog.exportSymbol('proto.proto.GetKeyE2eResp', null, global);
goog.exportSymbol('proto.proto.GetKeysE2eReq', null, global);
goog.exportSymbol('proto.proto.GetKeysE2eResp', null, global);
goog.exportSymbol('proto.proto.GetOwnKeysReq', null, global);
goog.exportSymbol('proto.proto.GetOwnKeysResp', null, global);
goog.exportSymbol('proto.proto.GiveUsersOrgKeyReq', null, global);
goog.exportSymbol('proto.proto.GiveUsersOrgKeyResp', null, global);
goog.exportSymbol('proto.proto.Key', null, global);
goog.exportSymbol('proto.proto.KeyE2e', null, global);
goog.exportSymbol('proto.proto.SetOrgAsymKeyReq', null, global);
goog.exportSymbol('proto.proto.SetOrgAsymKeyResp', null, global);
goog.exportSymbol('proto.proto.SetUserAsymKeyReq', null, global);
goog.exportSymbol('proto.proto.SetUserAsymKeyResp', null, global);
goog.exportSymbol('proto.proto.SetUserKdfMetadataReq', null, global);
goog.exportSymbol('proto.proto.SetUserKdfMetadataResp', null, global);
goog.exportSymbol('proto.proto.ShareE2EKeysReq', null, global);
goog.exportSymbol('proto.proto.ShareE2EKeysResp', null, global);
goog.exportSymbol('proto.proto.SharedKeyE2e', null, global);
goog.exportSymbol('proto.proto.UpdateE2EKeyReq', null, global);
goog.exportSymbol('proto.proto.UpdateE2EKeyResp', null, global);
goog.exportSymbol('proto.proto.UpdateEncryptedKeysReq', null, global);
goog.exportSymbol('proto.proto.UpdateEncryptedKeysResp', null, global);
goog.exportSymbol('proto.proto.UpdateFileKeysE2eReq', null, global);
goog.exportSymbol('proto.proto.UpdateFileKeysE2eResp', null, global);
goog.exportSymbol('proto.proto.UpdateKeyE2eReq', null, global);
goog.exportSymbol('proto.proto.UpdateKeyE2eResp', null, global);
goog.exportSymbol('proto.proto.UserPubKeys', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.EnableE2EReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.EnableE2EReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.EnableE2EReq.displayName = 'proto.proto.EnableE2EReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.EnableE2EResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.EnableE2EResp.repeatedFields_, null);
};
goog.inherits(proto.proto.EnableE2EResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.EnableE2EResp.displayName = 'proto.proto.EnableE2EResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetOwnKeysReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GetOwnKeysReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.GetOwnKeysReq.displayName = 'proto.proto.GetOwnKeysReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetOwnKeysResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GetOwnKeysResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.GetOwnKeysResp.displayName = 'proto.proto.GetOwnKeysResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UserPubKeys = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.UserPubKeys.repeatedFields_, null);
};
goog.inherits(proto.proto.UserPubKeys, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UserPubKeys.displayName = 'proto.proto.UserPubKeys';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Key = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Key, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Key.displayName = 'proto.proto.Key';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.EncryptedKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.EncryptedKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.EncryptedKey.displayName = 'proto.proto.EncryptedKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SetUserKdfMetadataReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SetUserKdfMetadataReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SetUserKdfMetadataReq.displayName = 'proto.proto.SetUserKdfMetadataReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SetUserKdfMetadataResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.SetUserKdfMetadataResp.repeatedFields_, null);
};
goog.inherits(proto.proto.SetUserKdfMetadataResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SetUserKdfMetadataResp.displayName = 'proto.proto.SetUserKdfMetadataResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UpdateEncryptedKeysReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.UpdateEncryptedKeysReq.repeatedFields_, null);
};
goog.inherits(proto.proto.UpdateEncryptedKeysReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UpdateEncryptedKeysReq.displayName = 'proto.proto.UpdateEncryptedKeysReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UpdateEncryptedKeysResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UpdateEncryptedKeysResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UpdateEncryptedKeysResp.displayName = 'proto.proto.UpdateEncryptedKeysResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SetUserAsymKeyReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SetUserAsymKeyReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SetUserAsymKeyReq.displayName = 'proto.proto.SetUserAsymKeyReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SetUserAsymKeyResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.SetUserAsymKeyResp.repeatedFields_, null);
};
goog.inherits(proto.proto.SetUserAsymKeyResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SetUserAsymKeyResp.displayName = 'proto.proto.SetUserAsymKeyResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SetOrgAsymKeyReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SetOrgAsymKeyReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SetOrgAsymKeyReq.displayName = 'proto.proto.SetOrgAsymKeyReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SetOrgAsymKeyResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.SetOrgAsymKeyResp.repeatedFields_, null);
};
goog.inherits(proto.proto.SetOrgAsymKeyResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SetOrgAsymKeyResp.displayName = 'proto.proto.SetOrgAsymKeyResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GiveUsersOrgKeyReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.GiveUsersOrgKeyReq.repeatedFields_, null);
};
goog.inherits(proto.proto.GiveUsersOrgKeyReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.GiveUsersOrgKeyReq.displayName = 'proto.proto.GiveUsersOrgKeyReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GiveUsersOrgKeyResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GiveUsersOrgKeyResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.GiveUsersOrgKeyResp.displayName = 'proto.proto.GiveUsersOrgKeyResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ShareE2EKeysReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ShareE2EKeysReq.repeatedFields_, null);
};
goog.inherits(proto.proto.ShareE2EKeysReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ShareE2EKeysReq.displayName = 'proto.proto.ShareE2EKeysReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SharedKeyE2e = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SharedKeyE2e, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SharedKeyE2e.displayName = 'proto.proto.SharedKeyE2e';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ShareE2EKeysResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ShareE2EKeysResp.repeatedFields_, null);
};
goog.inherits(proto.proto.ShareE2EKeysResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ShareE2EKeysResp.displayName = 'proto.proto.ShareE2EKeysResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetKeyE2eReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GetKeyE2eReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.GetKeyE2eReq.displayName = 'proto.proto.GetKeyE2eReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetKeyE2eResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GetKeyE2eResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.GetKeyE2eResp.displayName = 'proto.proto.GetKeyE2eResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetKeysE2eReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GetKeysE2eReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.GetKeysE2eReq.displayName = 'proto.proto.GetKeysE2eReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.KeyE2e = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.KeyE2e, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.KeyE2e.displayName = 'proto.proto.KeyE2e';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetKeysE2eResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.GetKeysE2eResp.repeatedFields_, null);
};
goog.inherits(proto.proto.GetKeysE2eResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.GetKeysE2eResp.displayName = 'proto.proto.GetKeysE2eResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UpdateKeyE2eReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UpdateKeyE2eReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UpdateKeyE2eReq.displayName = 'proto.proto.UpdateKeyE2eReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UpdateKeyE2eResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UpdateKeyE2eResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UpdateKeyE2eResp.displayName = 'proto.proto.UpdateKeyE2eResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetFileKeysE2eReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.GetFileKeysE2eReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.GetFileKeysE2eReq.displayName = 'proto.proto.GetFileKeysE2eReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.DocEncFileKeyE2E = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.DocEncFileKeyE2E, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.DocEncFileKeyE2E.displayName = 'proto.proto.DocEncFileKeyE2E';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.GetFileKeysE2eResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.GetFileKeysE2eResp.repeatedFields_, null);
};
goog.inherits(proto.proto.GetFileKeysE2eResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.GetFileKeysE2eResp.displayName = 'proto.proto.GetFileKeysE2eResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UpdateFileKeysE2eReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.UpdateFileKeysE2eReq.repeatedFields_, null);
};
goog.inherits(proto.proto.UpdateFileKeysE2eReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UpdateFileKeysE2eReq.displayName = 'proto.proto.UpdateFileKeysE2eReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UpdateFileKeysE2eResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UpdateFileKeysE2eResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UpdateFileKeysE2eResp.displayName = 'proto.proto.UpdateFileKeysE2eResp';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UpdateE2EKeyReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UpdateE2EKeyReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UpdateE2EKeyReq.displayName = 'proto.proto.UpdateE2EKeyReq';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.UpdateE2EKeyResp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.UpdateE2EKeyResp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.UpdateE2EKeyResp.displayName = 'proto.proto.UpdateE2EKeyResp';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.EnableE2EReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.EnableE2EReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.EnableE2EReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EnableE2EReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    orgpubkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userpubkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userencprikey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    orgencprikey: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.EnableE2EReq}
 */
proto.proto.EnableE2EReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.EnableE2EReq;
  return proto.proto.EnableE2EReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.EnableE2EReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.EnableE2EReq}
 */
proto.proto.EnableE2EReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrgpubkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserpubkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserencprikey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrgencprikey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.EnableE2EReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.EnableE2EReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.EnableE2EReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EnableE2EReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOrgpubkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserpubkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserencprikey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrgencprikey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string orgPubKey = 1;
 * @return {string}
 */
proto.proto.EnableE2EReq.prototype.getOrgpubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.EnableE2EReq} returns this
 */
proto.proto.EnableE2EReq.prototype.setOrgpubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userPubKey = 2;
 * @return {string}
 */
proto.proto.EnableE2EReq.prototype.getUserpubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.EnableE2EReq} returns this
 */
proto.proto.EnableE2EReq.prototype.setUserpubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string userEncPriKey = 3;
 * @return {string}
 */
proto.proto.EnableE2EReq.prototype.getUserencprikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.EnableE2EReq} returns this
 */
proto.proto.EnableE2EReq.prototype.setUserencprikey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string orgEncPriKey = 4;
 * @return {string}
 */
proto.proto.EnableE2EReq.prototype.getOrgencprikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.EnableE2EReq} returns this
 */
proto.proto.EnableE2EReq.prototype.setOrgencprikey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.EnableE2EResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.EnableE2EResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.EnableE2EResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.EnableE2EResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EnableE2EResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    publickeysList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.EnableE2EResp}
 */
proto.proto.EnableE2EResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.EnableE2EResp;
  return proto.proto.EnableE2EResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.EnableE2EResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.EnableE2EResp}
 */
proto.proto.EnableE2EResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPublickeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.EnableE2EResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.EnableE2EResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.EnableE2EResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EnableE2EResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublickeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string publicKeys = 1;
 * @return {!Array<string>}
 */
proto.proto.EnableE2EResp.prototype.getPublickeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.proto.EnableE2EResp} returns this
 */
proto.proto.EnableE2EResp.prototype.setPublickeysList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.EnableE2EResp} returns this
 */
proto.proto.EnableE2EResp.prototype.addPublickeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.EnableE2EResp} returns this
 */
proto.proto.EnableE2EResp.prototype.clearPublickeysList = function() {
  return this.setPublickeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetOwnKeysReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetOwnKeysReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetOwnKeysReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetOwnKeysReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetOwnKeysReq}
 */
proto.proto.GetOwnKeysReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetOwnKeysReq;
  return proto.proto.GetOwnKeysReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetOwnKeysReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetOwnKeysReq}
 */
proto.proto.GetOwnKeysReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetOwnKeysReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GetOwnKeysReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetOwnKeysReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetOwnKeysReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetOwnKeysResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetOwnKeysResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetOwnKeysResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetOwnKeysResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    encprivkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    encryptorid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userpubkeys: (f = msg.getUserpubkeys()) && proto.proto.UserPubKeys.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetOwnKeysResp}
 */
proto.proto.GetOwnKeysResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetOwnKeysResp;
  return proto.proto.GetOwnKeysResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetOwnKeysResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetOwnKeysResp}
 */
proto.proto.GetOwnKeysResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncprivkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncryptorid(value);
      break;
    case 3:
      var value = new proto.proto.UserPubKeys;
      reader.readMessage(value,proto.proto.UserPubKeys.deserializeBinaryFromReader);
      msg.setUserpubkeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetOwnKeysResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GetOwnKeysResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetOwnKeysResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetOwnKeysResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncprivkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEncryptorid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserpubkeys();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.UserPubKeys.serializeBinaryToWriter
    );
  }
};


/**
 * optional string encPrivKey = 1;
 * @return {string}
 */
proto.proto.GetOwnKeysResp.prototype.getEncprivkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.GetOwnKeysResp} returns this
 */
proto.proto.GetOwnKeysResp.prototype.setEncprivkey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string encryptorID = 2;
 * @return {string}
 */
proto.proto.GetOwnKeysResp.prototype.getEncryptorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.GetOwnKeysResp} returns this
 */
proto.proto.GetOwnKeysResp.prototype.setEncryptorid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional UserPubKeys userPubKeys = 3;
 * @return {?proto.proto.UserPubKeys}
 */
proto.proto.GetOwnKeysResp.prototype.getUserpubkeys = function() {
  return /** @type{?proto.proto.UserPubKeys} */ (
    jspb.Message.getWrapperField(this, proto.proto.UserPubKeys, 3));
};


/**
 * @param {?proto.proto.UserPubKeys|undefined} value
 * @return {!proto.proto.GetOwnKeysResp} returns this
*/
proto.proto.GetOwnKeysResp.prototype.setUserpubkeys = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.GetOwnKeysResp} returns this
 */
proto.proto.GetOwnKeysResp.prototype.clearUserpubkeys = function() {
  return this.setUserpubkeys(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.GetOwnKeysResp.prototype.hasUserpubkeys = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.UserPubKeys.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UserPubKeys.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UserPubKeys.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UserPubKeys} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UserPubKeys.toObject = function(includeInstance, msg) {
  var f, obj = {
    userpubkey: (f = msg.getUserpubkey()) && proto.proto.Key.toObject(includeInstance, f),
    orgpubkeysList: jspb.Message.toObjectList(msg.getOrgpubkeysList(),
    proto.proto.Key.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UserPubKeys}
 */
proto.proto.UserPubKeys.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UserPubKeys;
  return proto.proto.UserPubKeys.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UserPubKeys} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UserPubKeys}
 */
proto.proto.UserPubKeys.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Key;
      reader.readMessage(value,proto.proto.Key.deserializeBinaryFromReader);
      msg.setUserpubkey(value);
      break;
    case 2:
      var value = new proto.proto.Key;
      reader.readMessage(value,proto.proto.Key.deserializeBinaryFromReader);
      msg.addOrgpubkeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UserPubKeys.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UserPubKeys.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UserPubKeys} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UserPubKeys.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserpubkey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Key.serializeBinaryToWriter
    );
  }
  f = message.getOrgpubkeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.Key.serializeBinaryToWriter
    );
  }
};


/**
 * optional Key userPubKey = 1;
 * @return {?proto.proto.Key}
 */
proto.proto.UserPubKeys.prototype.getUserpubkey = function() {
  return /** @type{?proto.proto.Key} */ (
    jspb.Message.getWrapperField(this, proto.proto.Key, 1));
};


/**
 * @param {?proto.proto.Key|undefined} value
 * @return {!proto.proto.UserPubKeys} returns this
*/
proto.proto.UserPubKeys.prototype.setUserpubkey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.UserPubKeys} returns this
 */
proto.proto.UserPubKeys.prototype.clearUserpubkey = function() {
  return this.setUserpubkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.UserPubKeys.prototype.hasUserpubkey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Key orgPubKeys = 2;
 * @return {!Array<!proto.proto.Key>}
 */
proto.proto.UserPubKeys.prototype.getOrgpubkeysList = function() {
  return /** @type{!Array<!proto.proto.Key>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Key, 2));
};


/**
 * @param {!Array<!proto.proto.Key>} value
 * @return {!proto.proto.UserPubKeys} returns this
*/
proto.proto.UserPubKeys.prototype.setOrgpubkeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.Key=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Key}
 */
proto.proto.UserPubKeys.prototype.addOrgpubkeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.Key, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.UserPubKeys} returns this
 */
proto.proto.UserPubKeys.prototype.clearOrgpubkeysList = function() {
  return this.setOrgpubkeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Key.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Key.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Key} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Key.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    keyid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ownerid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Key}
 */
proto.proto.Key.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Key;
  return proto.proto.Key.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Key} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Key}
 */
proto.proto.Key.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Key.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Key.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Key} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Key.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOwnerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.proto.Key.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Key} returns this
 */
proto.proto.Key.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string keyID = 2;
 * @return {string}
 */
proto.proto.Key.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Key} returns this
 */
proto.proto.Key.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ownerID = 3;
 * @return {string}
 */
proto.proto.Key.prototype.getOwnerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Key} returns this
 */
proto.proto.Key.prototype.setOwnerid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.EncryptedKey.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.EncryptedKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.EncryptedKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EncryptedKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    enckey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    encryptorid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    ownerid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    keyid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.EncryptedKey}
 */
proto.proto.EncryptedKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.EncryptedKey;
  return proto.proto.EncryptedKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.EncryptedKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.EncryptedKey}
 */
proto.proto.EncryptedKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEnckey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncryptorid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOwnerid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.EncryptedKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.EncryptedKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.EncryptedKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.EncryptedKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnckey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEncryptorid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOwnerid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string encKey = 1;
 * @return {string}
 */
proto.proto.EncryptedKey.prototype.getEnckey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.EncryptedKey} returns this
 */
proto.proto.EncryptedKey.prototype.setEnckey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string encryptorID = 2;
 * @return {string}
 */
proto.proto.EncryptedKey.prototype.getEncryptorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.EncryptedKey} returns this
 */
proto.proto.EncryptedKey.prototype.setEncryptorid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string ownerID = 3;
 * @return {string}
 */
proto.proto.EncryptedKey.prototype.getOwnerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.EncryptedKey} returns this
 */
proto.proto.EncryptedKey.prototype.setOwnerid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string keyID = 4;
 * @return {string}
 */
proto.proto.EncryptedKey.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.EncryptedKey} returns this
 */
proto.proto.EncryptedKey.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SetUserKdfMetadataReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SetUserKdfMetadataReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SetUserKdfMetadataReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetUserKdfMetadataReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    kdfmeta: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SetUserKdfMetadataReq}
 */
proto.proto.SetUserKdfMetadataReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SetUserKdfMetadataReq;
  return proto.proto.SetUserKdfMetadataReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SetUserKdfMetadataReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SetUserKdfMetadataReq}
 */
proto.proto.SetUserKdfMetadataReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKdfmeta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SetUserKdfMetadataReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SetUserKdfMetadataReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SetUserKdfMetadataReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetUserKdfMetadataReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKdfmeta();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string kdfMeta = 1;
 * @return {string}
 */
proto.proto.SetUserKdfMetadataReq.prototype.getKdfmeta = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.SetUserKdfMetadataReq} returns this
 */
proto.proto.SetUserKdfMetadataReq.prototype.setKdfmeta = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.SetUserKdfMetadataResp.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SetUserKdfMetadataResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SetUserKdfMetadataResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SetUserKdfMetadataResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetUserKdfMetadataResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    keyid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, 0),
    encasymkeysList: jspb.Message.toObjectList(msg.getEncasymkeysList(),
    proto.proto.EncryptedKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SetUserKdfMetadataResp}
 */
proto.proto.SetUserKdfMetadataResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SetUserKdfMetadataResp;
  return proto.proto.SetUserKdfMetadataResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SetUserKdfMetadataResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SetUserKdfMetadataResp}
 */
proto.proto.SetUserKdfMetadataResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 4:
      var value = new proto.proto.EncryptedKey;
      reader.readMessage(value,proto.proto.EncryptedKey.deserializeBinaryFromReader);
      msg.addEncasymkeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SetUserKdfMetadataResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SetUserKdfMetadataResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SetUserKdfMetadataResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetUserKdfMetadataResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getEncasymkeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.proto.EncryptedKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.proto.SetUserKdfMetadataResp.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.SetUserKdfMetadataResp} returns this
 */
proto.proto.SetUserKdfMetadataResp.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string keyID = 2;
 * @return {string}
 */
proto.proto.SetUserKdfMetadataResp.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.SetUserKdfMetadataResp} returns this
 */
proto.proto.SetUserKdfMetadataResp.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 version = 3;
 * @return {number}
 */
proto.proto.SetUserKdfMetadataResp.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SetUserKdfMetadataResp} returns this
 */
proto.proto.SetUserKdfMetadataResp.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated EncryptedKey encAsymKeys = 4;
 * @return {!Array<!proto.proto.EncryptedKey>}
 */
proto.proto.SetUserKdfMetadataResp.prototype.getEncasymkeysList = function() {
  return /** @type{!Array<!proto.proto.EncryptedKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.EncryptedKey, 4));
};


/**
 * @param {!Array<!proto.proto.EncryptedKey>} value
 * @return {!proto.proto.SetUserKdfMetadataResp} returns this
*/
proto.proto.SetUserKdfMetadataResp.prototype.setEncasymkeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.proto.EncryptedKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.EncryptedKey}
 */
proto.proto.SetUserKdfMetadataResp.prototype.addEncasymkeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.proto.EncryptedKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.SetUserKdfMetadataResp} returns this
 */
proto.proto.SetUserKdfMetadataResp.prototype.clearEncasymkeysList = function() {
  return this.setEncasymkeysList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.UpdateEncryptedKeysReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UpdateEncryptedKeysReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UpdateEncryptedKeysReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UpdateEncryptedKeysReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateEncryptedKeysReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    enckeysList: jspb.Message.toObjectList(msg.getEnckeysList(),
    proto.proto.EncryptedKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UpdateEncryptedKeysReq}
 */
proto.proto.UpdateEncryptedKeysReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UpdateEncryptedKeysReq;
  return proto.proto.UpdateEncryptedKeysReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UpdateEncryptedKeysReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UpdateEncryptedKeysReq}
 */
proto.proto.UpdateEncryptedKeysReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 2:
      var value = new proto.proto.EncryptedKey;
      reader.readMessage(value,proto.proto.EncryptedKey.deserializeBinaryFromReader);
      msg.addEnckeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UpdateEncryptedKeysReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UpdateEncryptedKeysReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UpdateEncryptedKeysReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateEncryptedKeysReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEnckeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.EncryptedKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 version = 1;
 * @return {number}
 */
proto.proto.UpdateEncryptedKeysReq.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.UpdateEncryptedKeysReq} returns this
 */
proto.proto.UpdateEncryptedKeysReq.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated EncryptedKey encKeys = 2;
 * @return {!Array<!proto.proto.EncryptedKey>}
 */
proto.proto.UpdateEncryptedKeysReq.prototype.getEnckeysList = function() {
  return /** @type{!Array<!proto.proto.EncryptedKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.EncryptedKey, 2));
};


/**
 * @param {!Array<!proto.proto.EncryptedKey>} value
 * @return {!proto.proto.UpdateEncryptedKeysReq} returns this
*/
proto.proto.UpdateEncryptedKeysReq.prototype.setEnckeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.EncryptedKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.EncryptedKey}
 */
proto.proto.UpdateEncryptedKeysReq.prototype.addEnckeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.EncryptedKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.UpdateEncryptedKeysReq} returns this
 */
proto.proto.UpdateEncryptedKeysReq.prototype.clearEnckeysList = function() {
  return this.setEnckeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UpdateEncryptedKeysResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UpdateEncryptedKeysResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UpdateEncryptedKeysResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateEncryptedKeysResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UpdateEncryptedKeysResp}
 */
proto.proto.UpdateEncryptedKeysResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UpdateEncryptedKeysResp;
  return proto.proto.UpdateEncryptedKeysResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UpdateEncryptedKeysResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UpdateEncryptedKeysResp}
 */
proto.proto.UpdateEncryptedKeysResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UpdateEncryptedKeysResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UpdateEncryptedKeysResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UpdateEncryptedKeysResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateEncryptedKeysResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.proto.UpdateEncryptedKeysResp.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.UpdateEncryptedKeysResp} returns this
 */
proto.proto.UpdateEncryptedKeysResp.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SetUserAsymKeyReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SetUserAsymKeyReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SetUserAsymKeyReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetUserAsymKeyReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: (f = msg.getPubkey()) && proto.proto.Key.toObject(includeInstance, f),
    encprikey: (f = msg.getEncprikey()) && proto.proto.EncryptedKey.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SetUserAsymKeyReq}
 */
proto.proto.SetUserAsymKeyReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SetUserAsymKeyReq;
  return proto.proto.SetUserAsymKeyReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SetUserAsymKeyReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SetUserAsymKeyReq}
 */
proto.proto.SetUserAsymKeyReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Key;
      reader.readMessage(value,proto.proto.Key.deserializeBinaryFromReader);
      msg.setPubkey(value);
      break;
    case 2:
      var value = new proto.proto.EncryptedKey;
      reader.readMessage(value,proto.proto.EncryptedKey.deserializeBinaryFromReader);
      msg.setEncprikey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SetUserAsymKeyReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SetUserAsymKeyReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SetUserAsymKeyReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetUserAsymKeyReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubkey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Key.serializeBinaryToWriter
    );
  }
  f = message.getEncprikey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.EncryptedKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional Key pubKey = 1;
 * @return {?proto.proto.Key}
 */
proto.proto.SetUserAsymKeyReq.prototype.getPubkey = function() {
  return /** @type{?proto.proto.Key} */ (
    jspb.Message.getWrapperField(this, proto.proto.Key, 1));
};


/**
 * @param {?proto.proto.Key|undefined} value
 * @return {!proto.proto.SetUserAsymKeyReq} returns this
*/
proto.proto.SetUserAsymKeyReq.prototype.setPubkey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.SetUserAsymKeyReq} returns this
 */
proto.proto.SetUserAsymKeyReq.prototype.clearPubkey = function() {
  return this.setPubkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.SetUserAsymKeyReq.prototype.hasPubkey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EncryptedKey encPriKey = 2;
 * @return {?proto.proto.EncryptedKey}
 */
proto.proto.SetUserAsymKeyReq.prototype.getEncprikey = function() {
  return /** @type{?proto.proto.EncryptedKey} */ (
    jspb.Message.getWrapperField(this, proto.proto.EncryptedKey, 2));
};


/**
 * @param {?proto.proto.EncryptedKey|undefined} value
 * @return {!proto.proto.SetUserAsymKeyReq} returns this
*/
proto.proto.SetUserAsymKeyReq.prototype.setEncprikey = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.SetUserAsymKeyReq} returns this
 */
proto.proto.SetUserAsymKeyReq.prototype.clearEncprikey = function() {
  return this.setEncprikey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.SetUserAsymKeyReq.prototype.hasEncprikey = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.SetUserAsymKeyResp.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SetUserAsymKeyResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SetUserAsymKeyResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SetUserAsymKeyResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetUserAsymKeyResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    keyid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, 0),
    decryptorsmapMap: (f = msg.getDecryptorsmapMap()) ? f.toObject(includeInstance, proto.proto.EncryptedKey.toObject) : [],
    enckeystoupdateList: jspb.Message.toObjectList(msg.getEnckeystoupdateList(),
    proto.proto.EncryptedKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SetUserAsymKeyResp}
 */
proto.proto.SetUserAsymKeyResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SetUserAsymKeyResp;
  return proto.proto.SetUserAsymKeyResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SetUserAsymKeyResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SetUserAsymKeyResp}
 */
proto.proto.SetUserAsymKeyResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 4:
      var value = msg.getDecryptorsmapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.EncryptedKey.deserializeBinaryFromReader, "", new proto.proto.EncryptedKey());
         });
      break;
    case 5:
      var value = new proto.proto.EncryptedKey;
      reader.readMessage(value,proto.proto.EncryptedKey.deserializeBinaryFromReader);
      msg.addEnckeystoupdate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SetUserAsymKeyResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SetUserAsymKeyResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SetUserAsymKeyResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetUserAsymKeyResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDecryptorsmapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.EncryptedKey.serializeBinaryToWriter);
  }
  f = message.getEnckeystoupdateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.proto.EncryptedKey.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.proto.SetUserAsymKeyResp.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.SetUserAsymKeyResp} returns this
 */
proto.proto.SetUserAsymKeyResp.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string keyID = 2;
 * @return {string}
 */
proto.proto.SetUserAsymKeyResp.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.SetUserAsymKeyResp} returns this
 */
proto.proto.SetUserAsymKeyResp.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 version = 3;
 * @return {number}
 */
proto.proto.SetUserAsymKeyResp.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SetUserAsymKeyResp} returns this
 */
proto.proto.SetUserAsymKeyResp.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * map<string, EncryptedKey> decryptorsMap = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.EncryptedKey>}
 */
proto.proto.SetUserAsymKeyResp.prototype.getDecryptorsmapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.EncryptedKey>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.proto.EncryptedKey));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.SetUserAsymKeyResp} returns this
 */
proto.proto.SetUserAsymKeyResp.prototype.clearDecryptorsmapMap = function() {
  this.getDecryptorsmapMap().clear();
  return this;};


/**
 * repeated EncryptedKey encKeysToUpdate = 5;
 * @return {!Array<!proto.proto.EncryptedKey>}
 */
proto.proto.SetUserAsymKeyResp.prototype.getEnckeystoupdateList = function() {
  return /** @type{!Array<!proto.proto.EncryptedKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.EncryptedKey, 5));
};


/**
 * @param {!Array<!proto.proto.EncryptedKey>} value
 * @return {!proto.proto.SetUserAsymKeyResp} returns this
*/
proto.proto.SetUserAsymKeyResp.prototype.setEnckeystoupdateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.EncryptedKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.EncryptedKey}
 */
proto.proto.SetUserAsymKeyResp.prototype.addEnckeystoupdate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.EncryptedKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.SetUserAsymKeyResp} returns this
 */
proto.proto.SetUserAsymKeyResp.prototype.clearEnckeystoupdateList = function() {
  return this.setEnckeystoupdateList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SetOrgAsymKeyReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SetOrgAsymKeyReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SetOrgAsymKeyReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetOrgAsymKeyReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: (f = msg.getPubkey()) && proto.proto.Key.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SetOrgAsymKeyReq}
 */
proto.proto.SetOrgAsymKeyReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SetOrgAsymKeyReq;
  return proto.proto.SetOrgAsymKeyReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SetOrgAsymKeyReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SetOrgAsymKeyReq}
 */
proto.proto.SetOrgAsymKeyReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Key;
      reader.readMessage(value,proto.proto.Key.deserializeBinaryFromReader);
      msg.setPubkey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SetOrgAsymKeyReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SetOrgAsymKeyReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SetOrgAsymKeyReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetOrgAsymKeyReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubkey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.Key.serializeBinaryToWriter
    );
  }
};


/**
 * optional Key pubKey = 1;
 * @return {?proto.proto.Key}
 */
proto.proto.SetOrgAsymKeyReq.prototype.getPubkey = function() {
  return /** @type{?proto.proto.Key} */ (
    jspb.Message.getWrapperField(this, proto.proto.Key, 1));
};


/**
 * @param {?proto.proto.Key|undefined} value
 * @return {!proto.proto.SetOrgAsymKeyReq} returns this
*/
proto.proto.SetOrgAsymKeyReq.prototype.setPubkey = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.SetOrgAsymKeyReq} returns this
 */
proto.proto.SetOrgAsymKeyReq.prototype.clearPubkey = function() {
  return this.setPubkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.SetOrgAsymKeyReq.prototype.hasPubkey = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.SetOrgAsymKeyResp.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SetOrgAsymKeyResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SetOrgAsymKeyResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SetOrgAsymKeyResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetOrgAsymKeyResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    keyid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    version: jspb.Message.getFieldWithDefault(msg, 3, 0),
    decryptorsmapMap: (f = msg.getDecryptorsmapMap()) ? f.toObject(includeInstance, proto.proto.EncryptedKey.toObject) : [],
    enckeystoupdateList: jspb.Message.toObjectList(msg.getEnckeystoupdateList(),
    proto.proto.EncryptedKey.toObject, includeInstance),
    encryptorsmapMap: (f = msg.getEncryptorsmapMap()) ? f.toObject(includeInstance, proto.proto.Key.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SetOrgAsymKeyResp}
 */
proto.proto.SetOrgAsymKeyResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SetOrgAsymKeyResp;
  return proto.proto.SetOrgAsymKeyResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SetOrgAsymKeyResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SetOrgAsymKeyResp}
 */
proto.proto.SetOrgAsymKeyResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVersion(value);
      break;
    case 4:
      var value = msg.getDecryptorsmapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.EncryptedKey.deserializeBinaryFromReader, "", new proto.proto.EncryptedKey());
         });
      break;
    case 5:
      var value = new proto.proto.EncryptedKey;
      reader.readMessage(value,proto.proto.EncryptedKey.deserializeBinaryFromReader);
      msg.addEnckeystoupdate(value);
      break;
    case 6:
      var value = msg.getEncryptorsmapMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.Key.deserializeBinaryFromReader, "", new proto.proto.Key());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SetOrgAsymKeyResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SetOrgAsymKeyResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SetOrgAsymKeyResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SetOrgAsymKeyResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDecryptorsmapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.EncryptedKey.serializeBinaryToWriter);
  }
  f = message.getEnckeystoupdateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.proto.EncryptedKey.serializeBinaryToWriter
    );
  }
  f = message.getEncryptorsmapMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.Key.serializeBinaryToWriter);
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.proto.SetOrgAsymKeyResp.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.SetOrgAsymKeyResp} returns this
 */
proto.proto.SetOrgAsymKeyResp.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string keyID = 2;
 * @return {string}
 */
proto.proto.SetOrgAsymKeyResp.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.SetOrgAsymKeyResp} returns this
 */
proto.proto.SetOrgAsymKeyResp.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 version = 3;
 * @return {number}
 */
proto.proto.SetOrgAsymKeyResp.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SetOrgAsymKeyResp} returns this
 */
proto.proto.SetOrgAsymKeyResp.prototype.setVersion = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * map<string, EncryptedKey> decryptorsMap = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.EncryptedKey>}
 */
proto.proto.SetOrgAsymKeyResp.prototype.getDecryptorsmapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.EncryptedKey>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.proto.EncryptedKey));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.SetOrgAsymKeyResp} returns this
 */
proto.proto.SetOrgAsymKeyResp.prototype.clearDecryptorsmapMap = function() {
  this.getDecryptorsmapMap().clear();
  return this;};


/**
 * repeated EncryptedKey encKeysToUpdate = 5;
 * @return {!Array<!proto.proto.EncryptedKey>}
 */
proto.proto.SetOrgAsymKeyResp.prototype.getEnckeystoupdateList = function() {
  return /** @type{!Array<!proto.proto.EncryptedKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.EncryptedKey, 5));
};


/**
 * @param {!Array<!proto.proto.EncryptedKey>} value
 * @return {!proto.proto.SetOrgAsymKeyResp} returns this
*/
proto.proto.SetOrgAsymKeyResp.prototype.setEnckeystoupdateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.proto.EncryptedKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.EncryptedKey}
 */
proto.proto.SetOrgAsymKeyResp.prototype.addEnckeystoupdate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.proto.EncryptedKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.SetOrgAsymKeyResp} returns this
 */
proto.proto.SetOrgAsymKeyResp.prototype.clearEnckeystoupdateList = function() {
  return this.setEnckeystoupdateList([]);
};


/**
 * map<string, Key> encryptorsMap = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.Key>}
 */
proto.proto.SetOrgAsymKeyResp.prototype.getEncryptorsmapMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.proto.Key>} */ (
      jspb.Message.getMapField(this, 6, opt_noLazyCreate,
      proto.proto.Key));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.SetOrgAsymKeyResp} returns this
 */
proto.proto.SetOrgAsymKeyResp.prototype.clearEncryptorsmapMap = function() {
  this.getEncryptorsmapMap().clear();
  return this;};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.GiveUsersOrgKeyReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GiveUsersOrgKeyReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GiveUsersOrgKeyReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GiveUsersOrgKeyReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GiveUsersOrgKeyReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    enckeysList: jspb.Message.toObjectList(msg.getEnckeysList(),
    proto.proto.EncryptedKey.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GiveUsersOrgKeyReq}
 */
proto.proto.GiveUsersOrgKeyReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GiveUsersOrgKeyReq;
  return proto.proto.GiveUsersOrgKeyReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GiveUsersOrgKeyReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GiveUsersOrgKeyReq}
 */
proto.proto.GiveUsersOrgKeyReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.EncryptedKey;
      reader.readMessage(value,proto.proto.EncryptedKey.deserializeBinaryFromReader);
      msg.addEnckeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GiveUsersOrgKeyReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GiveUsersOrgKeyReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GiveUsersOrgKeyReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GiveUsersOrgKeyReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnckeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.EncryptedKey.serializeBinaryToWriter
    );
  }
};


/**
 * repeated EncryptedKey encKeys = 1;
 * @return {!Array<!proto.proto.EncryptedKey>}
 */
proto.proto.GiveUsersOrgKeyReq.prototype.getEnckeysList = function() {
  return /** @type{!Array<!proto.proto.EncryptedKey>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.EncryptedKey, 1));
};


/**
 * @param {!Array<!proto.proto.EncryptedKey>} value
 * @return {!proto.proto.GiveUsersOrgKeyReq} returns this
*/
proto.proto.GiveUsersOrgKeyReq.prototype.setEnckeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.EncryptedKey=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.EncryptedKey}
 */
proto.proto.GiveUsersOrgKeyReq.prototype.addEnckeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.EncryptedKey, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.GiveUsersOrgKeyReq} returns this
 */
proto.proto.GiveUsersOrgKeyReq.prototype.clearEnckeysList = function() {
  return this.setEnckeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GiveUsersOrgKeyResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GiveUsersOrgKeyResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GiveUsersOrgKeyResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GiveUsersOrgKeyResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GiveUsersOrgKeyResp}
 */
proto.proto.GiveUsersOrgKeyResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GiveUsersOrgKeyResp;
  return proto.proto.GiveUsersOrgKeyResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GiveUsersOrgKeyResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GiveUsersOrgKeyResp}
 */
proto.proto.GiveUsersOrgKeyResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GiveUsersOrgKeyResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GiveUsersOrgKeyResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GiveUsersOrgKeyResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GiveUsersOrgKeyResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool success = 1;
 * @return {boolean}
 */
proto.proto.GiveUsersOrgKeyResp.prototype.getSuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.GiveUsersOrgKeyResp} returns this
 */
proto.proto.GiveUsersOrgKeyResp.prototype.setSuccess = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ShareE2EKeysReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ShareE2EKeysReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ShareE2EKeysReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ShareE2EKeysReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ShareE2EKeysReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    sharedkeysList: jspb.Message.toObjectList(msg.getSharedkeysList(),
    proto.proto.SharedKeyE2e.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ShareE2EKeysReq}
 */
proto.proto.ShareE2EKeysReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ShareE2EKeysReq;
  return proto.proto.ShareE2EKeysReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ShareE2EKeysReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ShareE2EKeysReq}
 */
proto.proto.ShareE2EKeysReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.SharedKeyE2e;
      reader.readMessage(value,proto.proto.SharedKeyE2e.deserializeBinaryFromReader);
      msg.addSharedkeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ShareE2EKeysReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ShareE2EKeysReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ShareE2EKeysReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ShareE2EKeysReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSharedkeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.SharedKeyE2e.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SharedKeyE2e sharedKeys = 1;
 * @return {!Array<!proto.proto.SharedKeyE2e>}
 */
proto.proto.ShareE2EKeysReq.prototype.getSharedkeysList = function() {
  return /** @type{!Array<!proto.proto.SharedKeyE2e>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.SharedKeyE2e, 1));
};


/**
 * @param {!Array<!proto.proto.SharedKeyE2e>} value
 * @return {!proto.proto.ShareE2EKeysReq} returns this
*/
proto.proto.ShareE2EKeysReq.prototype.setSharedkeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.SharedKeyE2e=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.SharedKeyE2e}
 */
proto.proto.ShareE2EKeysReq.prototype.addSharedkeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.SharedKeyE2e, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.ShareE2EKeysReq} returns this
 */
proto.proto.ShareE2EKeysReq.prototype.clearSharedkeysList = function() {
  return this.setSharedkeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SharedKeyE2e.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SharedKeyE2e.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SharedKeyE2e} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SharedKeyE2e.toObject = function(includeInstance, msg) {
  var f, obj = {
    userpubkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userencprikey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    orgencprikey: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SharedKeyE2e}
 */
proto.proto.SharedKeyE2e.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SharedKeyE2e;
  return proto.proto.SharedKeyE2e.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SharedKeyE2e} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SharedKeyE2e}
 */
proto.proto.SharedKeyE2e.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserpubkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserencprikey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrgencprikey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SharedKeyE2e.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SharedKeyE2e.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SharedKeyE2e} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SharedKeyE2e.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserpubkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserencprikey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOrgencprikey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string userPubKey = 1;
 * @return {string}
 */
proto.proto.SharedKeyE2e.prototype.getUserpubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.SharedKeyE2e} returns this
 */
proto.proto.SharedKeyE2e.prototype.setUserpubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userEncPriKey = 2;
 * @return {string}
 */
proto.proto.SharedKeyE2e.prototype.getUserencprikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.SharedKeyE2e} returns this
 */
proto.proto.SharedKeyE2e.prototype.setUserencprikey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string orgEncPriKey = 3;
 * @return {string}
 */
proto.proto.SharedKeyE2e.prototype.getOrgencprikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.SharedKeyE2e} returns this
 */
proto.proto.SharedKeyE2e.prototype.setOrgencprikey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ShareE2EKeysResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ShareE2EKeysResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ShareE2EKeysResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ShareE2EKeysResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ShareE2EKeysResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    publickeysList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ShareE2EKeysResp}
 */
proto.proto.ShareE2EKeysResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ShareE2EKeysResp;
  return proto.proto.ShareE2EKeysResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ShareE2EKeysResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ShareE2EKeysResp}
 */
proto.proto.ShareE2EKeysResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPublickeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ShareE2EKeysResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ShareE2EKeysResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ShareE2EKeysResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ShareE2EKeysResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublickeysList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string publicKeys = 1;
 * @return {!Array<string>}
 */
proto.proto.ShareE2EKeysResp.prototype.getPublickeysList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.proto.ShareE2EKeysResp} returns this
 */
proto.proto.ShareE2EKeysResp.prototype.setPublickeysList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.ShareE2EKeysResp} returns this
 */
proto.proto.ShareE2EKeysResp.prototype.addPublickeys = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.ShareE2EKeysResp} returns this
 */
proto.proto.ShareE2EKeysResp.prototype.clearPublickeysList = function() {
  return this.setPublickeysList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetKeyE2eReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetKeyE2eReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetKeyE2eReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetKeyE2eReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetKeyE2eReq}
 */
proto.proto.GetKeyE2eReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetKeyE2eReq;
  return proto.proto.GetKeyE2eReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetKeyE2eReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetKeyE2eReq}
 */
proto.proto.GetKeyE2eReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetKeyE2eReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GetKeyE2eReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetKeyE2eReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetKeyE2eReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetKeyE2eResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetKeyE2eResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetKeyE2eResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetKeyE2eResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pubkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    encprikey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    version: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetKeyE2eResp}
 */
proto.proto.GetKeyE2eResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetKeyE2eResp;
  return proto.proto.GetKeyE2eResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetKeyE2eResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetKeyE2eResp}
 */
proto.proto.GetKeyE2eResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncprikey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetKeyE2eResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GetKeyE2eResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetKeyE2eResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetKeyE2eResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPubkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEncprikey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string keyID = 1;
 * @return {string}
 */
proto.proto.GetKeyE2eResp.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.GetKeyE2eResp} returns this
 */
proto.proto.GetKeyE2eResp.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pubKey = 2;
 * @return {string}
 */
proto.proto.GetKeyE2eResp.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.GetKeyE2eResp} returns this
 */
proto.proto.GetKeyE2eResp.prototype.setPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string encPriKey = 3;
 * @return {string}
 */
proto.proto.GetKeyE2eResp.prototype.getEncprikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.GetKeyE2eResp} returns this
 */
proto.proto.GetKeyE2eResp.prototype.setEncprikey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string version = 4;
 * @return {string}
 */
proto.proto.GetKeyE2eResp.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.GetKeyE2eResp} returns this
 */
proto.proto.GetKeyE2eResp.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetKeysE2eReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetKeysE2eReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetKeysE2eReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetKeysE2eReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetKeysE2eReq}
 */
proto.proto.GetKeysE2eReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetKeysE2eReq;
  return proto.proto.GetKeysE2eReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetKeysE2eReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetKeysE2eReq}
 */
proto.proto.GetKeysE2eReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetKeysE2eReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GetKeysE2eReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetKeysE2eReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetKeysE2eReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.KeyE2e.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.KeyE2e.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.KeyE2e} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.KeyE2e.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pubkey: jspb.Message.getFieldWithDefault(msg, 2, ""),
    encprikey: jspb.Message.getFieldWithDefault(msg, 3, ""),
    version: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.KeyE2e}
 */
proto.proto.KeyE2e.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.KeyE2e;
  return proto.proto.KeyE2e.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.KeyE2e} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.KeyE2e}
 */
proto.proto.KeyE2e.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncprikey(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.KeyE2e.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.KeyE2e.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.KeyE2e} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.KeyE2e.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPubkey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEncprikey();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string keyID = 1;
 * @return {string}
 */
proto.proto.KeyE2e.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.KeyE2e} returns this
 */
proto.proto.KeyE2e.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string pubKey = 2;
 * @return {string}
 */
proto.proto.KeyE2e.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.KeyE2e} returns this
 */
proto.proto.KeyE2e.prototype.setPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string encPriKey = 3;
 * @return {string}
 */
proto.proto.KeyE2e.prototype.getEncprikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.KeyE2e} returns this
 */
proto.proto.KeyE2e.prototype.setEncprikey = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string version = 4;
 * @return {string}
 */
proto.proto.KeyE2e.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.KeyE2e} returns this
 */
proto.proto.KeyE2e.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.GetKeysE2eResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetKeysE2eResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetKeysE2eResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetKeysE2eResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetKeysE2eResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    keylistList: jspb.Message.toObjectList(msg.getKeylistList(),
    proto.proto.KeyE2e.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetKeysE2eResp}
 */
proto.proto.GetKeysE2eResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetKeysE2eResp;
  return proto.proto.GetKeysE2eResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetKeysE2eResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetKeysE2eResp}
 */
proto.proto.GetKeysE2eResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.KeyE2e;
      reader.readMessage(value,proto.proto.KeyE2e.deserializeBinaryFromReader);
      msg.addKeylist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetKeysE2eResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GetKeysE2eResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetKeysE2eResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetKeysE2eResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeylistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.KeyE2e.serializeBinaryToWriter
    );
  }
};


/**
 * repeated KeyE2e keyList = 1;
 * @return {!Array<!proto.proto.KeyE2e>}
 */
proto.proto.GetKeysE2eResp.prototype.getKeylistList = function() {
  return /** @type{!Array<!proto.proto.KeyE2e>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.KeyE2e, 1));
};


/**
 * @param {!Array<!proto.proto.KeyE2e>} value
 * @return {!proto.proto.GetKeysE2eResp} returns this
*/
proto.proto.GetKeysE2eResp.prototype.setKeylistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.KeyE2e=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.KeyE2e}
 */
proto.proto.GetKeysE2eResp.prototype.addKeylist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.KeyE2e, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.GetKeysE2eResp} returns this
 */
proto.proto.GetKeysE2eResp.prototype.clearKeylistList = function() {
  return this.setKeylistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UpdateKeyE2eReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UpdateKeyE2eReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UpdateKeyE2eReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateKeyE2eReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    encprikey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UpdateKeyE2eReq}
 */
proto.proto.UpdateKeyE2eReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UpdateKeyE2eReq;
  return proto.proto.UpdateKeyE2eReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UpdateKeyE2eReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UpdateKeyE2eReq}
 */
proto.proto.UpdateKeyE2eReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPubkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncprikey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UpdateKeyE2eReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UpdateKeyE2eReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UpdateKeyE2eReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateKeyE2eReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEncprikey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string pubKey = 1;
 * @return {string}
 */
proto.proto.UpdateKeyE2eReq.prototype.getPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UpdateKeyE2eReq} returns this
 */
proto.proto.UpdateKeyE2eReq.prototype.setPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string encPriKey = 2;
 * @return {string}
 */
proto.proto.UpdateKeyE2eReq.prototype.getEncprikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UpdateKeyE2eReq} returns this
 */
proto.proto.UpdateKeyE2eReq.prototype.setEncprikey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UpdateKeyE2eResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UpdateKeyE2eResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UpdateKeyE2eResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateKeyE2eResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UpdateKeyE2eResp}
 */
proto.proto.UpdateKeyE2eResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UpdateKeyE2eResp;
  return proto.proto.UpdateKeyE2eResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UpdateKeyE2eResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UpdateKeyE2eResp}
 */
proto.proto.UpdateKeyE2eResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UpdateKeyE2eResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UpdateKeyE2eResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UpdateKeyE2eResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateKeyE2eResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string keyID = 1;
 * @return {string}
 */
proto.proto.UpdateKeyE2eResp.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UpdateKeyE2eResp} returns this
 */
proto.proto.UpdateKeyE2eResp.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetFileKeysE2eReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetFileKeysE2eReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetFileKeysE2eReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetFileKeysE2eReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    page: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetFileKeysE2eReq}
 */
proto.proto.GetFileKeysE2eReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetFileKeysE2eReq;
  return proto.proto.GetFileKeysE2eReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetFileKeysE2eReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetFileKeysE2eReq}
 */
proto.proto.GetFileKeysE2eReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetFileKeysE2eReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GetFileKeysE2eReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetFileKeysE2eReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetFileKeysE2eReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional string keyID = 1;
 * @return {string}
 */
proto.proto.GetFileKeysE2eReq.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.GetFileKeysE2eReq} returns this
 */
proto.proto.GetFileKeysE2eReq.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 limit = 2;
 * @return {number}
 */
proto.proto.GetFileKeysE2eReq.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.GetFileKeysE2eReq} returns this
 */
proto.proto.GetFileKeysE2eReq.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 page = 3;
 * @return {number}
 */
proto.proto.GetFileKeysE2eReq.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.GetFileKeysE2eReq} returns this
 */
proto.proto.GetFileKeysE2eReq.prototype.setPage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.DocEncFileKeyE2E.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.DocEncFileKeyE2E.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.DocEncFileKeyE2E} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DocEncFileKeyE2E.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    encfilekey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.DocEncFileKeyE2E}
 */
proto.proto.DocEncFileKeyE2E.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.DocEncFileKeyE2E;
  return proto.proto.DocEncFileKeyE2E.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.DocEncFileKeyE2E} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.DocEncFileKeyE2E}
 */
proto.proto.DocEncFileKeyE2E.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncfilekey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.DocEncFileKeyE2E.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.DocEncFileKeyE2E.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.DocEncFileKeyE2E} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.DocEncFileKeyE2E.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEncfilekey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string keyID = 1;
 * @return {string}
 */
proto.proto.DocEncFileKeyE2E.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DocEncFileKeyE2E} returns this
 */
proto.proto.DocEncFileKeyE2E.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string encFileKey = 2;
 * @return {string}
 */
proto.proto.DocEncFileKeyE2E.prototype.getEncfilekey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.DocEncFileKeyE2E} returns this
 */
proto.proto.DocEncFileKeyE2E.prototype.setEncfilekey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.GetFileKeysE2eResp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.GetFileKeysE2eResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.GetFileKeysE2eResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.GetFileKeysE2eResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetFileKeysE2eResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    encfilekeylistList: jspb.Message.toObjectList(msg.getEncfilekeylistList(),
    proto.proto.DocEncFileKeyE2E.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.GetFileKeysE2eResp}
 */
proto.proto.GetFileKeysE2eResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.GetFileKeysE2eResp;
  return proto.proto.GetFileKeysE2eResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.GetFileKeysE2eResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.GetFileKeysE2eResp}
 */
proto.proto.GetFileKeysE2eResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.DocEncFileKeyE2E;
      reader.readMessage(value,proto.proto.DocEncFileKeyE2E.deserializeBinaryFromReader);
      msg.addEncfilekeylist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.GetFileKeysE2eResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.GetFileKeysE2eResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.GetFileKeysE2eResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.GetFileKeysE2eResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncfilekeylistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.DocEncFileKeyE2E.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DocEncFileKeyE2E encFileKeyList = 1;
 * @return {!Array<!proto.proto.DocEncFileKeyE2E>}
 */
proto.proto.GetFileKeysE2eResp.prototype.getEncfilekeylistList = function() {
  return /** @type{!Array<!proto.proto.DocEncFileKeyE2E>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.DocEncFileKeyE2E, 1));
};


/**
 * @param {!Array<!proto.proto.DocEncFileKeyE2E>} value
 * @return {!proto.proto.GetFileKeysE2eResp} returns this
*/
proto.proto.GetFileKeysE2eResp.prototype.setEncfilekeylistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.DocEncFileKeyE2E=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.DocEncFileKeyE2E}
 */
proto.proto.GetFileKeysE2eResp.prototype.addEncfilekeylist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.DocEncFileKeyE2E, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.GetFileKeysE2eResp} returns this
 */
proto.proto.GetFileKeysE2eResp.prototype.clearEncfilekeylistList = function() {
  return this.setEncfilekeylistList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.UpdateFileKeysE2eReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UpdateFileKeysE2eReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UpdateFileKeysE2eReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UpdateFileKeysE2eReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateFileKeysE2eReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    newencfilekeylistList: jspb.Message.toObjectList(msg.getNewencfilekeylistList(),
    proto.proto.DocEncFileKeyE2E.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UpdateFileKeysE2eReq}
 */
proto.proto.UpdateFileKeysE2eReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UpdateFileKeysE2eReq;
  return proto.proto.UpdateFileKeysE2eReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UpdateFileKeysE2eReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UpdateFileKeysE2eReq}
 */
proto.proto.UpdateFileKeysE2eReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.DocEncFileKeyE2E;
      reader.readMessage(value,proto.proto.DocEncFileKeyE2E.deserializeBinaryFromReader);
      msg.addNewencfilekeylist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UpdateFileKeysE2eReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UpdateFileKeysE2eReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UpdateFileKeysE2eReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateFileKeysE2eReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNewencfilekeylistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.DocEncFileKeyE2E.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DocEncFileKeyE2E newEncFileKeyList = 1;
 * @return {!Array<!proto.proto.DocEncFileKeyE2E>}
 */
proto.proto.UpdateFileKeysE2eReq.prototype.getNewencfilekeylistList = function() {
  return /** @type{!Array<!proto.proto.DocEncFileKeyE2E>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.DocEncFileKeyE2E, 1));
};


/**
 * @param {!Array<!proto.proto.DocEncFileKeyE2E>} value
 * @return {!proto.proto.UpdateFileKeysE2eReq} returns this
*/
proto.proto.UpdateFileKeysE2eReq.prototype.setNewencfilekeylistList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.DocEncFileKeyE2E=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.DocEncFileKeyE2E}
 */
proto.proto.UpdateFileKeysE2eReq.prototype.addNewencfilekeylist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.DocEncFileKeyE2E, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.UpdateFileKeysE2eReq} returns this
 */
proto.proto.UpdateFileKeysE2eReq.prototype.clearNewencfilekeylistList = function() {
  return this.setNewencfilekeylistList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UpdateFileKeysE2eResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UpdateFileKeysE2eResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UpdateFileKeysE2eResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateFileKeysE2eResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    modified: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UpdateFileKeysE2eResp}
 */
proto.proto.UpdateFileKeysE2eResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UpdateFileKeysE2eResp;
  return proto.proto.UpdateFileKeysE2eResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UpdateFileKeysE2eResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UpdateFileKeysE2eResp}
 */
proto.proto.UpdateFileKeysE2eResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setModified(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UpdateFileKeysE2eResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UpdateFileKeysE2eResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UpdateFileKeysE2eResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateFileKeysE2eResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getModified();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 modified = 1;
 * @return {number}
 */
proto.proto.UpdateFileKeysE2eResp.prototype.getModified = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.UpdateFileKeysE2eResp} returns this
 */
proto.proto.UpdateFileKeysE2eResp.prototype.setModified = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UpdateE2EKeyReq.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UpdateE2EKeyReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UpdateE2EKeyReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateE2EKeyReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userpubkey: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userencprikey: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UpdateE2EKeyReq}
 */
proto.proto.UpdateE2EKeyReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UpdateE2EKeyReq;
  return proto.proto.UpdateE2EKeyReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UpdateE2EKeyReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UpdateE2EKeyReq}
 */
proto.proto.UpdateE2EKeyReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserpubkey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserencprikey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UpdateE2EKeyReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UpdateE2EKeyReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UpdateE2EKeyReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateE2EKeyReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserpubkey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserencprikey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string userPubKey = 1;
 * @return {string}
 */
proto.proto.UpdateE2EKeyReq.prototype.getUserpubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UpdateE2EKeyReq} returns this
 */
proto.proto.UpdateE2EKeyReq.prototype.setUserpubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userEncPriKey = 2;
 * @return {string}
 */
proto.proto.UpdateE2EKeyReq.prototype.getUserencprikey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UpdateE2EKeyReq} returns this
 */
proto.proto.UpdateE2EKeyReq.prototype.setUserencprikey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.UpdateE2EKeyResp.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.UpdateE2EKeyResp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.UpdateE2EKeyResp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateE2EKeyResp.toObject = function(includeInstance, msg) {
  var f, obj = {
    keyid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.UpdateE2EKeyResp}
 */
proto.proto.UpdateE2EKeyResp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.UpdateE2EKeyResp;
  return proto.proto.UpdateE2EKeyResp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.UpdateE2EKeyResp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.UpdateE2EKeyResp}
 */
proto.proto.UpdateE2EKeyResp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKeyid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.UpdateE2EKeyResp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.UpdateE2EKeyResp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.UpdateE2EKeyResp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.UpdateE2EKeyResp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeyid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string keyID = 1;
 * @return {string}
 */
proto.proto.UpdateE2EKeyResp.prototype.getKeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UpdateE2EKeyResp} returns this
 */
proto.proto.UpdateE2EKeyResp.prototype.setKeyid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.proto.UpdateE2EKeyResp.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.UpdateE2EKeyResp} returns this
 */
proto.proto.UpdateE2EKeyResp.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.proto);
